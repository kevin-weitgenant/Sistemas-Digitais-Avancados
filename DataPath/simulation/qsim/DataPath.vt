// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/27/2021 20:32:43"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    DataPath
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DataPath_vlg_sample_tst(
	c,
	clock,
	data_in,
	reset,
	sampler_tx
);
input [28:0] c;
input  clock;
input [0:31] data_in;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(c or clock or data_in or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module DataPath_vlg_check_tst (
	cout,
	data_out,
	Muxes8pra1_DOIS_t,
	Muxes8pra1_TRES_t,
	Muxes8pra1_UM_t,
	N,
	ov,
	r0,
	r1,
	r2,
	ULA1_t,
	ULA2_t,
	Z,
	sampler_rx
);
input  cout;
input [0:31] data_out;
input [0:31] Muxes8pra1_DOIS_t;
input [0:31] Muxes8pra1_TRES_t;
input [0:31] Muxes8pra1_UM_t;
input  N;
input  ov;
input [0:31] r0;
input [0:31] r1;
input [0:31] r2;
input [0:31] ULA1_t;
input [0:31] ULA2_t;
input  Z;
input sampler_rx;

reg  cout_expected;
reg [0:31] data_out_expected;
reg [0:31] Muxes8pra1_DOIS_t_expected;
reg [0:31] Muxes8pra1_TRES_t_expected;
reg [0:31] Muxes8pra1_UM_t_expected;
reg  N_expected;
reg  ov_expected;
reg [0:31] r0_expected;
reg [0:31] r1_expected;
reg [0:31] r2_expected;
reg [0:31] ULA1_t_expected;
reg [0:31] ULA2_t_expected;
reg  Z_expected;

reg  cout_prev;
reg [0:31] data_out_prev;
reg [0:31] Muxes8pra1_DOIS_t_prev;
reg [0:31] Muxes8pra1_TRES_t_prev;
reg [0:31] Muxes8pra1_UM_t_prev;
reg  N_prev;
reg  ov_prev;
reg [0:31] r0_prev;
reg [0:31] r1_prev;
reg [0:31] r2_prev;
reg [0:31] ULA1_t_prev;
reg [0:31] ULA2_t_prev;
reg  Z_prev;

reg  cout_expected_prev;
reg [0:31] data_out_expected_prev;
reg [0:31] Muxes8pra1_DOIS_t_expected_prev;
reg [0:31] Muxes8pra1_TRES_t_expected_prev;
reg [0:31] Muxes8pra1_UM_t_expected_prev;
reg  N_expected_prev;
reg  ov_expected_prev;
reg [0:31] r0_expected_prev;
reg [0:31] r1_expected_prev;
reg [0:31] r2_expected_prev;
reg [0:31] ULA1_t_expected_prev;
reg [0:31] ULA2_t_expected_prev;
reg  Z_expected_prev;

reg  last_cout_exp;
reg [0:31] last_data_out_exp;
reg [0:31] last_Muxes8pra1_DOIS_t_exp;
reg [0:31] last_Muxes8pra1_TRES_t_exp;
reg [0:31] last_Muxes8pra1_UM_t_exp;
reg  last_N_exp;
reg  last_ov_exp;
reg [0:31] last_r0_exp;
reg [0:31] last_r1_exp;
reg [0:31] last_r2_exp;
reg [0:31] last_ULA1_t_exp;
reg [0:31] last_ULA2_t_exp;
reg  last_Z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:13] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 13'b1;
end

// update real /o prevs

always @(trigger)
begin
	cout_prev = cout;
	data_out_prev = data_out;
	Muxes8pra1_DOIS_t_prev = Muxes8pra1_DOIS_t;
	Muxes8pra1_TRES_t_prev = Muxes8pra1_TRES_t;
	Muxes8pra1_UM_t_prev = Muxes8pra1_UM_t;
	N_prev = N;
	ov_prev = ov;
	r0_prev = r0;
	r1_prev = r1;
	r2_prev = r2;
	ULA1_t_prev = ULA1_t;
	ULA2_t_prev = ULA2_t;
	Z_prev = Z;
end

// update expected /o prevs

always @(trigger)
begin
	cout_expected_prev = cout_expected;
	data_out_expected_prev = data_out_expected;
	Muxes8pra1_DOIS_t_expected_prev = Muxes8pra1_DOIS_t_expected;
	Muxes8pra1_TRES_t_expected_prev = Muxes8pra1_TRES_t_expected;
	Muxes8pra1_UM_t_expected_prev = Muxes8pra1_UM_t_expected;
	N_expected_prev = N_expected;
	ov_expected_prev = ov_expected;
	r0_expected_prev = r0_expected;
	r1_expected_prev = r1_expected;
	r2_expected_prev = r2_expected;
	ULA1_t_expected_prev = ULA1_t_expected;
	ULA2_t_expected_prev = ULA2_t_expected;
	Z_expected_prev = Z_expected;
end



// expected cout
initial
begin
	cout_expected = 1'bX;
end 
// expected data_out[ 31 ]
initial
begin
	data_out_expected[31] = 1'bX;
end 
// expected data_out[ 30 ]
initial
begin
	data_out_expected[30] = 1'bX;
end 
// expected data_out[ 29 ]
initial
begin
	data_out_expected[29] = 1'bX;
end 
// expected data_out[ 28 ]
initial
begin
	data_out_expected[28] = 1'bX;
end 
// expected data_out[ 27 ]
initial
begin
	data_out_expected[27] = 1'bX;
end 
// expected data_out[ 26 ]
initial
begin
	data_out_expected[26] = 1'bX;
end 
// expected data_out[ 25 ]
initial
begin
	data_out_expected[25] = 1'bX;
end 
// expected data_out[ 24 ]
initial
begin
	data_out_expected[24] = 1'bX;
end 
// expected data_out[ 23 ]
initial
begin
	data_out_expected[23] = 1'bX;
end 
// expected data_out[ 22 ]
initial
begin
	data_out_expected[22] = 1'bX;
end 
// expected data_out[ 21 ]
initial
begin
	data_out_expected[21] = 1'bX;
end 
// expected data_out[ 20 ]
initial
begin
	data_out_expected[20] = 1'bX;
end 
// expected data_out[ 19 ]
initial
begin
	data_out_expected[19] = 1'bX;
end 
// expected data_out[ 18 ]
initial
begin
	data_out_expected[18] = 1'bX;
end 
// expected data_out[ 17 ]
initial
begin
	data_out_expected[17] = 1'bX;
end 
// expected data_out[ 16 ]
initial
begin
	data_out_expected[16] = 1'bX;
end 
// expected data_out[ 15 ]
initial
begin
	data_out_expected[15] = 1'bX;
end 
// expected data_out[ 14 ]
initial
begin
	data_out_expected[14] = 1'bX;
end 
// expected data_out[ 13 ]
initial
begin
	data_out_expected[13] = 1'bX;
end 
// expected data_out[ 12 ]
initial
begin
	data_out_expected[12] = 1'bX;
end 
// expected data_out[ 11 ]
initial
begin
	data_out_expected[11] = 1'bX;
end 
// expected data_out[ 10 ]
initial
begin
	data_out_expected[10] = 1'bX;
end 
// expected data_out[ 9 ]
initial
begin
	data_out_expected[9] = 1'bX;
end 
// expected data_out[ 8 ]
initial
begin
	data_out_expected[8] = 1'bX;
end 
// expected data_out[ 7 ]
initial
begin
	data_out_expected[7] = 1'bX;
end 
// expected data_out[ 6 ]
initial
begin
	data_out_expected[6] = 1'bX;
end 
// expected data_out[ 5 ]
initial
begin
	data_out_expected[5] = 1'bX;
end 
// expected data_out[ 4 ]
initial
begin
	data_out_expected[4] = 1'bX;
end 
// expected data_out[ 3 ]
initial
begin
	data_out_expected[3] = 1'bX;
end 
// expected data_out[ 2 ]
initial
begin
	data_out_expected[2] = 1'bX;
end 
// expected data_out[ 1 ]
initial
begin
	data_out_expected[1] = 1'bX;
end 
// expected data_out[ 0 ]
initial
begin
	data_out_expected[0] = 1'bX;
end 

// expected N
initial
begin
	N_expected = 1'bX;
end 

// expected ov
initial
begin
	ov_expected = 1'bX;
end 
// expected r0[ 31 ]
initial
begin
	r0_expected[31] = 1'bX;
end 
// expected r0[ 30 ]
initial
begin
	r0_expected[30] = 1'bX;
end 
// expected r0[ 29 ]
initial
begin
	r0_expected[29] = 1'bX;
end 
// expected r0[ 28 ]
initial
begin
	r0_expected[28] = 1'bX;
end 
// expected r0[ 27 ]
initial
begin
	r0_expected[27] = 1'bX;
end 
// expected r0[ 26 ]
initial
begin
	r0_expected[26] = 1'bX;
end 
// expected r0[ 25 ]
initial
begin
	r0_expected[25] = 1'bX;
end 
// expected r0[ 24 ]
initial
begin
	r0_expected[24] = 1'bX;
end 
// expected r0[ 23 ]
initial
begin
	r0_expected[23] = 1'bX;
end 
// expected r0[ 22 ]
initial
begin
	r0_expected[22] = 1'bX;
end 
// expected r0[ 21 ]
initial
begin
	r0_expected[21] = 1'bX;
end 
// expected r0[ 20 ]
initial
begin
	r0_expected[20] = 1'bX;
end 
// expected r0[ 19 ]
initial
begin
	r0_expected[19] = 1'bX;
end 
// expected r0[ 18 ]
initial
begin
	r0_expected[18] = 1'bX;
end 
// expected r0[ 17 ]
initial
begin
	r0_expected[17] = 1'bX;
end 
// expected r0[ 16 ]
initial
begin
	r0_expected[16] = 1'bX;
end 
// expected r0[ 15 ]
initial
begin
	r0_expected[15] = 1'bX;
end 
// expected r0[ 14 ]
initial
begin
	r0_expected[14] = 1'bX;
end 
// expected r0[ 13 ]
initial
begin
	r0_expected[13] = 1'bX;
end 
// expected r0[ 12 ]
initial
begin
	r0_expected[12] = 1'bX;
end 
// expected r0[ 11 ]
initial
begin
	r0_expected[11] = 1'bX;
end 
// expected r0[ 10 ]
initial
begin
	r0_expected[10] = 1'bX;
end 
// expected r0[ 9 ]
initial
begin
	r0_expected[9] = 1'bX;
end 
// expected r0[ 8 ]
initial
begin
	r0_expected[8] = 1'bX;
end 
// expected r0[ 7 ]
initial
begin
	r0_expected[7] = 1'bX;
end 
// expected r0[ 6 ]
initial
begin
	r0_expected[6] = 1'bX;
end 
// expected r0[ 5 ]
initial
begin
	r0_expected[5] = 1'bX;
end 
// expected r0[ 4 ]
initial
begin
	r0_expected[4] = 1'bX;
end 
// expected r0[ 3 ]
initial
begin
	r0_expected[3] = 1'bX;
end 
// expected r0[ 2 ]
initial
begin
	r0_expected[2] = 1'bX;
end 
// expected r0[ 1 ]
initial
begin
	r0_expected[1] = 1'bX;
end 
// expected r0[ 0 ]
initial
begin
	r0_expected[0] = 1'bX;
end 
// expected r1[ 31 ]
initial
begin
	r1_expected[31] = 1'bX;
end 
// expected r1[ 30 ]
initial
begin
	r1_expected[30] = 1'bX;
end 
// expected r1[ 29 ]
initial
begin
	r1_expected[29] = 1'bX;
end 
// expected r1[ 28 ]
initial
begin
	r1_expected[28] = 1'bX;
end 
// expected r1[ 27 ]
initial
begin
	r1_expected[27] = 1'bX;
end 
// expected r1[ 26 ]
initial
begin
	r1_expected[26] = 1'bX;
end 
// expected r1[ 25 ]
initial
begin
	r1_expected[25] = 1'bX;
end 
// expected r1[ 24 ]
initial
begin
	r1_expected[24] = 1'bX;
end 
// expected r1[ 23 ]
initial
begin
	r1_expected[23] = 1'bX;
end 
// expected r1[ 22 ]
initial
begin
	r1_expected[22] = 1'bX;
end 
// expected r1[ 21 ]
initial
begin
	r1_expected[21] = 1'bX;
end 
// expected r1[ 20 ]
initial
begin
	r1_expected[20] = 1'bX;
end 
// expected r1[ 19 ]
initial
begin
	r1_expected[19] = 1'bX;
end 
// expected r1[ 18 ]
initial
begin
	r1_expected[18] = 1'bX;
end 
// expected r1[ 17 ]
initial
begin
	r1_expected[17] = 1'bX;
end 
// expected r1[ 16 ]
initial
begin
	r1_expected[16] = 1'bX;
end 
// expected r1[ 15 ]
initial
begin
	r1_expected[15] = 1'bX;
end 
// expected r1[ 14 ]
initial
begin
	r1_expected[14] = 1'bX;
end 
// expected r1[ 13 ]
initial
begin
	r1_expected[13] = 1'bX;
end 
// expected r1[ 12 ]
initial
begin
	r1_expected[12] = 1'bX;
end 
// expected r1[ 11 ]
initial
begin
	r1_expected[11] = 1'bX;
end 
// expected r1[ 10 ]
initial
begin
	r1_expected[10] = 1'bX;
end 
// expected r1[ 9 ]
initial
begin
	r1_expected[9] = 1'bX;
end 
// expected r1[ 8 ]
initial
begin
	r1_expected[8] = 1'bX;
end 
// expected r1[ 7 ]
initial
begin
	r1_expected[7] = 1'bX;
end 
// expected r1[ 6 ]
initial
begin
	r1_expected[6] = 1'bX;
end 
// expected r1[ 5 ]
initial
begin
	r1_expected[5] = 1'bX;
end 
// expected r1[ 4 ]
initial
begin
	r1_expected[4] = 1'bX;
end 
// expected r1[ 3 ]
initial
begin
	r1_expected[3] = 1'bX;
end 
// expected r1[ 2 ]
initial
begin
	r1_expected[2] = 1'bX;
end 
// expected r1[ 1 ]
initial
begin
	r1_expected[1] = 1'bX;
end 
// expected r1[ 0 ]
initial
begin
	r1_expected[0] = 1'bX;
end 
// expected r2[ 31 ]
initial
begin
	r2_expected[31] = 1'bX;
end 
// expected r2[ 30 ]
initial
begin
	r2_expected[30] = 1'bX;
end 
// expected r2[ 29 ]
initial
begin
	r2_expected[29] = 1'bX;
end 
// expected r2[ 28 ]
initial
begin
	r2_expected[28] = 1'bX;
end 
// expected r2[ 27 ]
initial
begin
	r2_expected[27] = 1'bX;
end 
// expected r2[ 26 ]
initial
begin
	r2_expected[26] = 1'bX;
end 
// expected r2[ 25 ]
initial
begin
	r2_expected[25] = 1'bX;
end 
// expected r2[ 24 ]
initial
begin
	r2_expected[24] = 1'bX;
end 
// expected r2[ 23 ]
initial
begin
	r2_expected[23] = 1'bX;
end 
// expected r2[ 22 ]
initial
begin
	r2_expected[22] = 1'bX;
end 
// expected r2[ 21 ]
initial
begin
	r2_expected[21] = 1'bX;
end 
// expected r2[ 20 ]
initial
begin
	r2_expected[20] = 1'bX;
end 
// expected r2[ 19 ]
initial
begin
	r2_expected[19] = 1'bX;
end 
// expected r2[ 18 ]
initial
begin
	r2_expected[18] = 1'bX;
end 
// expected r2[ 17 ]
initial
begin
	r2_expected[17] = 1'bX;
end 
// expected r2[ 16 ]
initial
begin
	r2_expected[16] = 1'bX;
end 
// expected r2[ 15 ]
initial
begin
	r2_expected[15] = 1'bX;
end 
// expected r2[ 14 ]
initial
begin
	r2_expected[14] = 1'bX;
end 
// expected r2[ 13 ]
initial
begin
	r2_expected[13] = 1'bX;
end 
// expected r2[ 12 ]
initial
begin
	r2_expected[12] = 1'bX;
end 
// expected r2[ 11 ]
initial
begin
	r2_expected[11] = 1'bX;
end 
// expected r2[ 10 ]
initial
begin
	r2_expected[10] = 1'bX;
end 
// expected r2[ 9 ]
initial
begin
	r2_expected[9] = 1'bX;
end 
// expected r2[ 8 ]
initial
begin
	r2_expected[8] = 1'bX;
end 
// expected r2[ 7 ]
initial
begin
	r2_expected[7] = 1'bX;
end 
// expected r2[ 6 ]
initial
begin
	r2_expected[6] = 1'bX;
end 
// expected r2[ 5 ]
initial
begin
	r2_expected[5] = 1'bX;
end 
// expected r2[ 4 ]
initial
begin
	r2_expected[4] = 1'bX;
end 
// expected r2[ 3 ]
initial
begin
	r2_expected[3] = 1'bX;
end 
// expected r2[ 2 ]
initial
begin
	r2_expected[2] = 1'bX;
end 
// expected r2[ 1 ]
initial
begin
	r2_expected[1] = 1'bX;
end 
// expected r2[ 0 ]
initial
begin
	r2_expected[0] = 1'bX;
end 

// expected Z
initial
begin
	Z_expected = 1'bX;
end 
// expected ULA2_t[ 31 ]
initial
begin
	ULA2_t_expected[31] = 1'bX;
end 
// expected ULA2_t[ 30 ]
initial
begin
	ULA2_t_expected[30] = 1'bX;
end 
// expected ULA2_t[ 29 ]
initial
begin
	ULA2_t_expected[29] = 1'bX;
end 
// expected ULA2_t[ 28 ]
initial
begin
	ULA2_t_expected[28] = 1'bX;
end 
// expected ULA2_t[ 27 ]
initial
begin
	ULA2_t_expected[27] = 1'bX;
end 
// expected ULA2_t[ 26 ]
initial
begin
	ULA2_t_expected[26] = 1'bX;
end 
// expected ULA2_t[ 25 ]
initial
begin
	ULA2_t_expected[25] = 1'bX;
end 
// expected ULA2_t[ 24 ]
initial
begin
	ULA2_t_expected[24] = 1'bX;
end 
// expected ULA2_t[ 23 ]
initial
begin
	ULA2_t_expected[23] = 1'bX;
end 
// expected ULA2_t[ 22 ]
initial
begin
	ULA2_t_expected[22] = 1'bX;
end 
// expected ULA2_t[ 21 ]
initial
begin
	ULA2_t_expected[21] = 1'bX;
end 
// expected ULA2_t[ 20 ]
initial
begin
	ULA2_t_expected[20] = 1'bX;
end 
// expected ULA2_t[ 19 ]
initial
begin
	ULA2_t_expected[19] = 1'bX;
end 
// expected ULA2_t[ 18 ]
initial
begin
	ULA2_t_expected[18] = 1'bX;
end 
// expected ULA2_t[ 17 ]
initial
begin
	ULA2_t_expected[17] = 1'bX;
end 
// expected ULA2_t[ 16 ]
initial
begin
	ULA2_t_expected[16] = 1'bX;
end 
// expected ULA2_t[ 15 ]
initial
begin
	ULA2_t_expected[15] = 1'bX;
end 
// expected ULA2_t[ 14 ]
initial
begin
	ULA2_t_expected[14] = 1'bX;
end 
// expected ULA2_t[ 13 ]
initial
begin
	ULA2_t_expected[13] = 1'bX;
end 
// expected ULA2_t[ 12 ]
initial
begin
	ULA2_t_expected[12] = 1'bX;
end 
// expected ULA2_t[ 11 ]
initial
begin
	ULA2_t_expected[11] = 1'bX;
end 
// expected ULA2_t[ 10 ]
initial
begin
	ULA2_t_expected[10] = 1'bX;
end 
// expected ULA2_t[ 9 ]
initial
begin
	ULA2_t_expected[9] = 1'bX;
end 
// expected ULA2_t[ 8 ]
initial
begin
	ULA2_t_expected[8] = 1'bX;
end 
// expected ULA2_t[ 7 ]
initial
begin
	ULA2_t_expected[7] = 1'bX;
end 
// expected ULA2_t[ 6 ]
initial
begin
	ULA2_t_expected[6] = 1'bX;
end 
// expected ULA2_t[ 5 ]
initial
begin
	ULA2_t_expected[5] = 1'bX;
end 
// expected ULA2_t[ 4 ]
initial
begin
	ULA2_t_expected[4] = 1'bX;
end 
// expected ULA2_t[ 3 ]
initial
begin
	ULA2_t_expected[3] = 1'bX;
end 
// expected ULA2_t[ 2 ]
initial
begin
	ULA2_t_expected[2] = 1'bX;
end 
// expected ULA2_t[ 1 ]
initial
begin
	ULA2_t_expected[1] = 1'bX;
end 
// expected ULA2_t[ 0 ]
initial
begin
	ULA2_t_expected[0] = 1'bX;
end 
// expected ULA1_t[ 31 ]
initial
begin
	ULA1_t_expected[31] = 1'bX;
end 
// expected ULA1_t[ 30 ]
initial
begin
	ULA1_t_expected[30] = 1'bX;
end 
// expected ULA1_t[ 29 ]
initial
begin
	ULA1_t_expected[29] = 1'bX;
end 
// expected ULA1_t[ 28 ]
initial
begin
	ULA1_t_expected[28] = 1'bX;
end 
// expected ULA1_t[ 27 ]
initial
begin
	ULA1_t_expected[27] = 1'bX;
end 
// expected ULA1_t[ 26 ]
initial
begin
	ULA1_t_expected[26] = 1'bX;
end 
// expected ULA1_t[ 25 ]
initial
begin
	ULA1_t_expected[25] = 1'bX;
end 
// expected ULA1_t[ 24 ]
initial
begin
	ULA1_t_expected[24] = 1'bX;
end 
// expected ULA1_t[ 23 ]
initial
begin
	ULA1_t_expected[23] = 1'bX;
end 
// expected ULA1_t[ 22 ]
initial
begin
	ULA1_t_expected[22] = 1'bX;
end 
// expected ULA1_t[ 21 ]
initial
begin
	ULA1_t_expected[21] = 1'bX;
end 
// expected ULA1_t[ 20 ]
initial
begin
	ULA1_t_expected[20] = 1'bX;
end 
// expected ULA1_t[ 19 ]
initial
begin
	ULA1_t_expected[19] = 1'bX;
end 
// expected ULA1_t[ 18 ]
initial
begin
	ULA1_t_expected[18] = 1'bX;
end 
// expected ULA1_t[ 17 ]
initial
begin
	ULA1_t_expected[17] = 1'bX;
end 
// expected ULA1_t[ 16 ]
initial
begin
	ULA1_t_expected[16] = 1'bX;
end 
// expected ULA1_t[ 15 ]
initial
begin
	ULA1_t_expected[15] = 1'bX;
end 
// expected ULA1_t[ 14 ]
initial
begin
	ULA1_t_expected[14] = 1'bX;
end 
// expected ULA1_t[ 13 ]
initial
begin
	ULA1_t_expected[13] = 1'bX;
end 
// expected ULA1_t[ 12 ]
initial
begin
	ULA1_t_expected[12] = 1'bX;
end 
// expected ULA1_t[ 11 ]
initial
begin
	ULA1_t_expected[11] = 1'bX;
end 
// expected ULA1_t[ 10 ]
initial
begin
	ULA1_t_expected[10] = 1'bX;
end 
// expected ULA1_t[ 9 ]
initial
begin
	ULA1_t_expected[9] = 1'bX;
end 
// expected ULA1_t[ 8 ]
initial
begin
	ULA1_t_expected[8] = 1'bX;
end 
// expected ULA1_t[ 7 ]
initial
begin
	ULA1_t_expected[7] = 1'bX;
end 
// expected ULA1_t[ 6 ]
initial
begin
	ULA1_t_expected[6] = 1'bX;
end 
// expected ULA1_t[ 5 ]
initial
begin
	ULA1_t_expected[5] = 1'bX;
end 
// expected ULA1_t[ 4 ]
initial
begin
	ULA1_t_expected[4] = 1'bX;
end 
// expected ULA1_t[ 3 ]
initial
begin
	ULA1_t_expected[3] = 1'bX;
end 
// expected ULA1_t[ 2 ]
initial
begin
	ULA1_t_expected[2] = 1'bX;
end 
// expected ULA1_t[ 1 ]
initial
begin
	ULA1_t_expected[1] = 1'bX;
end 
// expected ULA1_t[ 0 ]
initial
begin
	ULA1_t_expected[0] = 1'bX;
end 
// expected Muxes8pra1_DOIS_t[ 31 ]
initial
begin
	Muxes8pra1_DOIS_t_expected[31] = 1'bX;
end 
// expected Muxes8pra1_DOIS_t[ 30 ]
initial
begin
	Muxes8pra1_DOIS_t_expected[30] = 1'bX;
end 
// expected Muxes8pra1_DOIS_t[ 29 ]
initial
begin
	Muxes8pra1_DOIS_t_expected[29] = 1'bX;
end 
// expected Muxes8pra1_DOIS_t[ 28 ]
initial
begin
	Muxes8pra1_DOIS_t_expected[28] = 1'bX;
end 
// expected Muxes8pra1_DOIS_t[ 27 ]
initial
begin
	Muxes8pra1_DOIS_t_expected[27] = 1'bX;
end 
// expected Muxes8pra1_DOIS_t[ 26 ]
initial
begin
	Muxes8pra1_DOIS_t_expected[26] = 1'bX;
end 
// expected Muxes8pra1_DOIS_t[ 25 ]
initial
begin
	Muxes8pra1_DOIS_t_expected[25] = 1'bX;
end 
// expected Muxes8pra1_DOIS_t[ 24 ]
initial
begin
	Muxes8pra1_DOIS_t_expected[24] = 1'bX;
end 
// expected Muxes8pra1_DOIS_t[ 23 ]
initial
begin
	Muxes8pra1_DOIS_t_expected[23] = 1'bX;
end 
// expected Muxes8pra1_DOIS_t[ 22 ]
initial
begin
	Muxes8pra1_DOIS_t_expected[22] = 1'bX;
end 
// expected Muxes8pra1_DOIS_t[ 21 ]
initial
begin
	Muxes8pra1_DOIS_t_expected[21] = 1'bX;
end 
// expected Muxes8pra1_DOIS_t[ 20 ]
initial
begin
	Muxes8pra1_DOIS_t_expected[20] = 1'bX;
end 
// expected Muxes8pra1_DOIS_t[ 19 ]
initial
begin
	Muxes8pra1_DOIS_t_expected[19] = 1'bX;
end 
// expected Muxes8pra1_DOIS_t[ 18 ]
initial
begin
	Muxes8pra1_DOIS_t_expected[18] = 1'bX;
end 
// expected Muxes8pra1_DOIS_t[ 17 ]
initial
begin
	Muxes8pra1_DOIS_t_expected[17] = 1'bX;
end 
// expected Muxes8pra1_DOIS_t[ 16 ]
initial
begin
	Muxes8pra1_DOIS_t_expected[16] = 1'bX;
end 
// expected Muxes8pra1_DOIS_t[ 15 ]
initial
begin
	Muxes8pra1_DOIS_t_expected[15] = 1'bX;
end 
// expected Muxes8pra1_DOIS_t[ 14 ]
initial
begin
	Muxes8pra1_DOIS_t_expected[14] = 1'bX;
end 
// expected Muxes8pra1_DOIS_t[ 13 ]
initial
begin
	Muxes8pra1_DOIS_t_expected[13] = 1'bX;
end 
// expected Muxes8pra1_DOIS_t[ 12 ]
initial
begin
	Muxes8pra1_DOIS_t_expected[12] = 1'bX;
end 
// expected Muxes8pra1_DOIS_t[ 11 ]
initial
begin
	Muxes8pra1_DOIS_t_expected[11] = 1'bX;
end 
// expected Muxes8pra1_DOIS_t[ 10 ]
initial
begin
	Muxes8pra1_DOIS_t_expected[10] = 1'bX;
end 
// expected Muxes8pra1_DOIS_t[ 9 ]
initial
begin
	Muxes8pra1_DOIS_t_expected[9] = 1'bX;
end 
// expected Muxes8pra1_DOIS_t[ 8 ]
initial
begin
	Muxes8pra1_DOIS_t_expected[8] = 1'bX;
end 
// expected Muxes8pra1_DOIS_t[ 7 ]
initial
begin
	Muxes8pra1_DOIS_t_expected[7] = 1'bX;
end 
// expected Muxes8pra1_DOIS_t[ 6 ]
initial
begin
	Muxes8pra1_DOIS_t_expected[6] = 1'bX;
end 
// expected Muxes8pra1_DOIS_t[ 5 ]
initial
begin
	Muxes8pra1_DOIS_t_expected[5] = 1'bX;
end 
// expected Muxes8pra1_DOIS_t[ 4 ]
initial
begin
	Muxes8pra1_DOIS_t_expected[4] = 1'bX;
end 
// expected Muxes8pra1_DOIS_t[ 3 ]
initial
begin
	Muxes8pra1_DOIS_t_expected[3] = 1'bX;
end 
// expected Muxes8pra1_DOIS_t[ 2 ]
initial
begin
	Muxes8pra1_DOIS_t_expected[2] = 1'bX;
end 
// expected Muxes8pra1_DOIS_t[ 1 ]
initial
begin
	Muxes8pra1_DOIS_t_expected[1] = 1'bX;
end 
// expected Muxes8pra1_DOIS_t[ 0 ]
initial
begin
	Muxes8pra1_DOIS_t_expected[0] = 1'bX;
end 
// expected Muxes8pra1_TRES_t[ 31 ]
initial
begin
	Muxes8pra1_TRES_t_expected[31] = 1'bX;
end 
// expected Muxes8pra1_TRES_t[ 30 ]
initial
begin
	Muxes8pra1_TRES_t_expected[30] = 1'bX;
end 
// expected Muxes8pra1_TRES_t[ 29 ]
initial
begin
	Muxes8pra1_TRES_t_expected[29] = 1'bX;
end 
// expected Muxes8pra1_TRES_t[ 28 ]
initial
begin
	Muxes8pra1_TRES_t_expected[28] = 1'bX;
end 
// expected Muxes8pra1_TRES_t[ 27 ]
initial
begin
	Muxes8pra1_TRES_t_expected[27] = 1'bX;
end 
// expected Muxes8pra1_TRES_t[ 26 ]
initial
begin
	Muxes8pra1_TRES_t_expected[26] = 1'bX;
end 
// expected Muxes8pra1_TRES_t[ 25 ]
initial
begin
	Muxes8pra1_TRES_t_expected[25] = 1'bX;
end 
// expected Muxes8pra1_TRES_t[ 24 ]
initial
begin
	Muxes8pra1_TRES_t_expected[24] = 1'bX;
end 
// expected Muxes8pra1_TRES_t[ 23 ]
initial
begin
	Muxes8pra1_TRES_t_expected[23] = 1'bX;
end 
// expected Muxes8pra1_TRES_t[ 22 ]
initial
begin
	Muxes8pra1_TRES_t_expected[22] = 1'bX;
end 
// expected Muxes8pra1_TRES_t[ 21 ]
initial
begin
	Muxes8pra1_TRES_t_expected[21] = 1'bX;
end 
// expected Muxes8pra1_TRES_t[ 20 ]
initial
begin
	Muxes8pra1_TRES_t_expected[20] = 1'bX;
end 
// expected Muxes8pra1_TRES_t[ 19 ]
initial
begin
	Muxes8pra1_TRES_t_expected[19] = 1'bX;
end 
// expected Muxes8pra1_TRES_t[ 18 ]
initial
begin
	Muxes8pra1_TRES_t_expected[18] = 1'bX;
end 
// expected Muxes8pra1_TRES_t[ 17 ]
initial
begin
	Muxes8pra1_TRES_t_expected[17] = 1'bX;
end 
// expected Muxes8pra1_TRES_t[ 16 ]
initial
begin
	Muxes8pra1_TRES_t_expected[16] = 1'bX;
end 
// expected Muxes8pra1_TRES_t[ 15 ]
initial
begin
	Muxes8pra1_TRES_t_expected[15] = 1'bX;
end 
// expected Muxes8pra1_TRES_t[ 14 ]
initial
begin
	Muxes8pra1_TRES_t_expected[14] = 1'bX;
end 
// expected Muxes8pra1_TRES_t[ 13 ]
initial
begin
	Muxes8pra1_TRES_t_expected[13] = 1'bX;
end 
// expected Muxes8pra1_TRES_t[ 12 ]
initial
begin
	Muxes8pra1_TRES_t_expected[12] = 1'bX;
end 
// expected Muxes8pra1_TRES_t[ 11 ]
initial
begin
	Muxes8pra1_TRES_t_expected[11] = 1'bX;
end 
// expected Muxes8pra1_TRES_t[ 10 ]
initial
begin
	Muxes8pra1_TRES_t_expected[10] = 1'bX;
end 
// expected Muxes8pra1_TRES_t[ 9 ]
initial
begin
	Muxes8pra1_TRES_t_expected[9] = 1'bX;
end 
// expected Muxes8pra1_TRES_t[ 8 ]
initial
begin
	Muxes8pra1_TRES_t_expected[8] = 1'bX;
end 
// expected Muxes8pra1_TRES_t[ 7 ]
initial
begin
	Muxes8pra1_TRES_t_expected[7] = 1'bX;
end 
// expected Muxes8pra1_TRES_t[ 6 ]
initial
begin
	Muxes8pra1_TRES_t_expected[6] = 1'bX;
end 
// expected Muxes8pra1_TRES_t[ 5 ]
initial
begin
	Muxes8pra1_TRES_t_expected[5] = 1'bX;
end 
// expected Muxes8pra1_TRES_t[ 4 ]
initial
begin
	Muxes8pra1_TRES_t_expected[4] = 1'bX;
end 
// expected Muxes8pra1_TRES_t[ 3 ]
initial
begin
	Muxes8pra1_TRES_t_expected[3] = 1'bX;
end 
// expected Muxes8pra1_TRES_t[ 2 ]
initial
begin
	Muxes8pra1_TRES_t_expected[2] = 1'bX;
end 
// expected Muxes8pra1_TRES_t[ 1 ]
initial
begin
	Muxes8pra1_TRES_t_expected[1] = 1'bX;
end 
// expected Muxes8pra1_TRES_t[ 0 ]
initial
begin
	Muxes8pra1_TRES_t_expected[0] = 1'bX;
end 
// expected Muxes8pra1_UM_t[ 31 ]
initial
begin
	Muxes8pra1_UM_t_expected[31] = 1'bX;
end 
// expected Muxes8pra1_UM_t[ 30 ]
initial
begin
	Muxes8pra1_UM_t_expected[30] = 1'bX;
end 
// expected Muxes8pra1_UM_t[ 29 ]
initial
begin
	Muxes8pra1_UM_t_expected[29] = 1'bX;
end 
// expected Muxes8pra1_UM_t[ 28 ]
initial
begin
	Muxes8pra1_UM_t_expected[28] = 1'bX;
end 
// expected Muxes8pra1_UM_t[ 27 ]
initial
begin
	Muxes8pra1_UM_t_expected[27] = 1'bX;
end 
// expected Muxes8pra1_UM_t[ 26 ]
initial
begin
	Muxes8pra1_UM_t_expected[26] = 1'bX;
end 
// expected Muxes8pra1_UM_t[ 25 ]
initial
begin
	Muxes8pra1_UM_t_expected[25] = 1'bX;
end 
// expected Muxes8pra1_UM_t[ 24 ]
initial
begin
	Muxes8pra1_UM_t_expected[24] = 1'bX;
end 
// expected Muxes8pra1_UM_t[ 23 ]
initial
begin
	Muxes8pra1_UM_t_expected[23] = 1'bX;
end 
// expected Muxes8pra1_UM_t[ 22 ]
initial
begin
	Muxes8pra1_UM_t_expected[22] = 1'bX;
end 
// expected Muxes8pra1_UM_t[ 21 ]
initial
begin
	Muxes8pra1_UM_t_expected[21] = 1'bX;
end 
// expected Muxes8pra1_UM_t[ 20 ]
initial
begin
	Muxes8pra1_UM_t_expected[20] = 1'bX;
end 
// expected Muxes8pra1_UM_t[ 19 ]
initial
begin
	Muxes8pra1_UM_t_expected[19] = 1'bX;
end 
// expected Muxes8pra1_UM_t[ 18 ]
initial
begin
	Muxes8pra1_UM_t_expected[18] = 1'bX;
end 
// expected Muxes8pra1_UM_t[ 17 ]
initial
begin
	Muxes8pra1_UM_t_expected[17] = 1'bX;
end 
// expected Muxes8pra1_UM_t[ 16 ]
initial
begin
	Muxes8pra1_UM_t_expected[16] = 1'bX;
end 
// expected Muxes8pra1_UM_t[ 15 ]
initial
begin
	Muxes8pra1_UM_t_expected[15] = 1'bX;
end 
// expected Muxes8pra1_UM_t[ 14 ]
initial
begin
	Muxes8pra1_UM_t_expected[14] = 1'bX;
end 
// expected Muxes8pra1_UM_t[ 13 ]
initial
begin
	Muxes8pra1_UM_t_expected[13] = 1'bX;
end 
// expected Muxes8pra1_UM_t[ 12 ]
initial
begin
	Muxes8pra1_UM_t_expected[12] = 1'bX;
end 
// expected Muxes8pra1_UM_t[ 11 ]
initial
begin
	Muxes8pra1_UM_t_expected[11] = 1'bX;
end 
// expected Muxes8pra1_UM_t[ 10 ]
initial
begin
	Muxes8pra1_UM_t_expected[10] = 1'bX;
end 
// expected Muxes8pra1_UM_t[ 9 ]
initial
begin
	Muxes8pra1_UM_t_expected[9] = 1'bX;
end 
// expected Muxes8pra1_UM_t[ 8 ]
initial
begin
	Muxes8pra1_UM_t_expected[8] = 1'bX;
end 
// expected Muxes8pra1_UM_t[ 7 ]
initial
begin
	Muxes8pra1_UM_t_expected[7] = 1'bX;
end 
// expected Muxes8pra1_UM_t[ 6 ]
initial
begin
	Muxes8pra1_UM_t_expected[6] = 1'bX;
end 
// expected Muxes8pra1_UM_t[ 5 ]
initial
begin
	Muxes8pra1_UM_t_expected[5] = 1'bX;
end 
// expected Muxes8pra1_UM_t[ 4 ]
initial
begin
	Muxes8pra1_UM_t_expected[4] = 1'bX;
end 
// expected Muxes8pra1_UM_t[ 3 ]
initial
begin
	Muxes8pra1_UM_t_expected[3] = 1'bX;
end 
// expected Muxes8pra1_UM_t[ 2 ]
initial
begin
	Muxes8pra1_UM_t_expected[2] = 1'bX;
end 
// expected Muxes8pra1_UM_t[ 1 ]
initial
begin
	Muxes8pra1_UM_t_expected[1] = 1'bX;
end 
// expected Muxes8pra1_UM_t[ 0 ]
initial
begin
	Muxes8pra1_UM_t_expected[0] = 1'bX;
end 
// generate trigger
always @(cout_expected or cout or data_out_expected or data_out or Muxes8pra1_DOIS_t_expected or Muxes8pra1_DOIS_t or Muxes8pra1_TRES_t_expected or Muxes8pra1_TRES_t or Muxes8pra1_UM_t_expected or Muxes8pra1_UM_t or N_expected or N or ov_expected or ov or r0_expected or r0 or r1_expected or r1 or r2_expected or r2 or ULA1_t_expected or ULA1_t or ULA2_t_expected or ULA2_t or Z_expected or Z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected cout = %b | expected data_out = %b | expected Muxes8pra1_DOIS_t = %b | expected Muxes8pra1_TRES_t = %b | expected Muxes8pra1_UM_t = %b | expected N = %b | expected ov = %b | expected r0 = %b | expected r1 = %b | expected r2 = %b | expected ULA1_t = %b | expected ULA2_t = %b | expected Z = %b | ",cout_expected_prev,data_out_expected_prev,Muxes8pra1_DOIS_t_expected_prev,Muxes8pra1_TRES_t_expected_prev,Muxes8pra1_UM_t_expected_prev,N_expected_prev,ov_expected_prev,r0_expected_prev,r1_expected_prev,r2_expected_prev,ULA1_t_expected_prev,ULA2_t_expected_prev,Z_expected_prev);
	$display("| real cout = %b | real data_out = %b | real Muxes8pra1_DOIS_t = %b | real Muxes8pra1_TRES_t = %b | real Muxes8pra1_UM_t = %b | real N = %b | real ov = %b | real r0 = %b | real r1 = %b | real r2 = %b | real ULA1_t = %b | real ULA2_t = %b | real Z = %b | ",cout_prev,data_out_prev,Muxes8pra1_DOIS_t_prev,Muxes8pra1_TRES_t_prev,Muxes8pra1_UM_t_prev,N_prev,ov_prev,r0_prev,r1_prev,r2_prev,ULA1_t_prev,ULA2_t_prev,Z_prev);
`endif
	if (
		( cout_expected_prev !== 1'bx ) && ( cout_prev !== cout_expected_prev )
		&& ((cout_expected_prev !== last_cout_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cout_expected_prev);
		$display ("     Real value = %b", cout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cout_exp = cout_expected_prev;
	end
	if (
		( data_out_expected_prev[0] !== 1'bx ) && ( data_out_prev[0] !== data_out_expected_prev[0] )
		&& ((data_out_expected_prev[0] !== last_data_out_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[0] = data_out_expected_prev[0];
	end
	if (
		( data_out_expected_prev[1] !== 1'bx ) && ( data_out_prev[1] !== data_out_expected_prev[1] )
		&& ((data_out_expected_prev[1] !== last_data_out_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[1] = data_out_expected_prev[1];
	end
	if (
		( data_out_expected_prev[2] !== 1'bx ) && ( data_out_prev[2] !== data_out_expected_prev[2] )
		&& ((data_out_expected_prev[2] !== last_data_out_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[2] = data_out_expected_prev[2];
	end
	if (
		( data_out_expected_prev[3] !== 1'bx ) && ( data_out_prev[3] !== data_out_expected_prev[3] )
		&& ((data_out_expected_prev[3] !== last_data_out_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[3] = data_out_expected_prev[3];
	end
	if (
		( data_out_expected_prev[4] !== 1'bx ) && ( data_out_prev[4] !== data_out_expected_prev[4] )
		&& ((data_out_expected_prev[4] !== last_data_out_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[4] = data_out_expected_prev[4];
	end
	if (
		( data_out_expected_prev[5] !== 1'bx ) && ( data_out_prev[5] !== data_out_expected_prev[5] )
		&& ((data_out_expected_prev[5] !== last_data_out_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[5] = data_out_expected_prev[5];
	end
	if (
		( data_out_expected_prev[6] !== 1'bx ) && ( data_out_prev[6] !== data_out_expected_prev[6] )
		&& ((data_out_expected_prev[6] !== last_data_out_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[6] = data_out_expected_prev[6];
	end
	if (
		( data_out_expected_prev[7] !== 1'bx ) && ( data_out_prev[7] !== data_out_expected_prev[7] )
		&& ((data_out_expected_prev[7] !== last_data_out_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[7] = data_out_expected_prev[7];
	end
	if (
		( data_out_expected_prev[8] !== 1'bx ) && ( data_out_prev[8] !== data_out_expected_prev[8] )
		&& ((data_out_expected_prev[8] !== last_data_out_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[8] = data_out_expected_prev[8];
	end
	if (
		( data_out_expected_prev[9] !== 1'bx ) && ( data_out_prev[9] !== data_out_expected_prev[9] )
		&& ((data_out_expected_prev[9] !== last_data_out_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[9] = data_out_expected_prev[9];
	end
	if (
		( data_out_expected_prev[10] !== 1'bx ) && ( data_out_prev[10] !== data_out_expected_prev[10] )
		&& ((data_out_expected_prev[10] !== last_data_out_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[10] = data_out_expected_prev[10];
	end
	if (
		( data_out_expected_prev[11] !== 1'bx ) && ( data_out_prev[11] !== data_out_expected_prev[11] )
		&& ((data_out_expected_prev[11] !== last_data_out_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[11] = data_out_expected_prev[11];
	end
	if (
		( data_out_expected_prev[12] !== 1'bx ) && ( data_out_prev[12] !== data_out_expected_prev[12] )
		&& ((data_out_expected_prev[12] !== last_data_out_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[12] = data_out_expected_prev[12];
	end
	if (
		( data_out_expected_prev[13] !== 1'bx ) && ( data_out_prev[13] !== data_out_expected_prev[13] )
		&& ((data_out_expected_prev[13] !== last_data_out_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[13] = data_out_expected_prev[13];
	end
	if (
		( data_out_expected_prev[14] !== 1'bx ) && ( data_out_prev[14] !== data_out_expected_prev[14] )
		&& ((data_out_expected_prev[14] !== last_data_out_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[14] = data_out_expected_prev[14];
	end
	if (
		( data_out_expected_prev[15] !== 1'bx ) && ( data_out_prev[15] !== data_out_expected_prev[15] )
		&& ((data_out_expected_prev[15] !== last_data_out_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[15] = data_out_expected_prev[15];
	end
	if (
		( data_out_expected_prev[16] !== 1'bx ) && ( data_out_prev[16] !== data_out_expected_prev[16] )
		&& ((data_out_expected_prev[16] !== last_data_out_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[16] = data_out_expected_prev[16];
	end
	if (
		( data_out_expected_prev[17] !== 1'bx ) && ( data_out_prev[17] !== data_out_expected_prev[17] )
		&& ((data_out_expected_prev[17] !== last_data_out_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[17] = data_out_expected_prev[17];
	end
	if (
		( data_out_expected_prev[18] !== 1'bx ) && ( data_out_prev[18] !== data_out_expected_prev[18] )
		&& ((data_out_expected_prev[18] !== last_data_out_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[18] = data_out_expected_prev[18];
	end
	if (
		( data_out_expected_prev[19] !== 1'bx ) && ( data_out_prev[19] !== data_out_expected_prev[19] )
		&& ((data_out_expected_prev[19] !== last_data_out_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[19] = data_out_expected_prev[19];
	end
	if (
		( data_out_expected_prev[20] !== 1'bx ) && ( data_out_prev[20] !== data_out_expected_prev[20] )
		&& ((data_out_expected_prev[20] !== last_data_out_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[20] = data_out_expected_prev[20];
	end
	if (
		( data_out_expected_prev[21] !== 1'bx ) && ( data_out_prev[21] !== data_out_expected_prev[21] )
		&& ((data_out_expected_prev[21] !== last_data_out_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[21] = data_out_expected_prev[21];
	end
	if (
		( data_out_expected_prev[22] !== 1'bx ) && ( data_out_prev[22] !== data_out_expected_prev[22] )
		&& ((data_out_expected_prev[22] !== last_data_out_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[22] = data_out_expected_prev[22];
	end
	if (
		( data_out_expected_prev[23] !== 1'bx ) && ( data_out_prev[23] !== data_out_expected_prev[23] )
		&& ((data_out_expected_prev[23] !== last_data_out_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[23] = data_out_expected_prev[23];
	end
	if (
		( data_out_expected_prev[24] !== 1'bx ) && ( data_out_prev[24] !== data_out_expected_prev[24] )
		&& ((data_out_expected_prev[24] !== last_data_out_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[24] = data_out_expected_prev[24];
	end
	if (
		( data_out_expected_prev[25] !== 1'bx ) && ( data_out_prev[25] !== data_out_expected_prev[25] )
		&& ((data_out_expected_prev[25] !== last_data_out_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[25] = data_out_expected_prev[25];
	end
	if (
		( data_out_expected_prev[26] !== 1'bx ) && ( data_out_prev[26] !== data_out_expected_prev[26] )
		&& ((data_out_expected_prev[26] !== last_data_out_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[26] = data_out_expected_prev[26];
	end
	if (
		( data_out_expected_prev[27] !== 1'bx ) && ( data_out_prev[27] !== data_out_expected_prev[27] )
		&& ((data_out_expected_prev[27] !== last_data_out_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[27] = data_out_expected_prev[27];
	end
	if (
		( data_out_expected_prev[28] !== 1'bx ) && ( data_out_prev[28] !== data_out_expected_prev[28] )
		&& ((data_out_expected_prev[28] !== last_data_out_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[28] = data_out_expected_prev[28];
	end
	if (
		( data_out_expected_prev[29] !== 1'bx ) && ( data_out_prev[29] !== data_out_expected_prev[29] )
		&& ((data_out_expected_prev[29] !== last_data_out_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[29] = data_out_expected_prev[29];
	end
	if (
		( data_out_expected_prev[30] !== 1'bx ) && ( data_out_prev[30] !== data_out_expected_prev[30] )
		&& ((data_out_expected_prev[30] !== last_data_out_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[30] = data_out_expected_prev[30];
	end
	if (
		( data_out_expected_prev[31] !== 1'bx ) && ( data_out_prev[31] !== data_out_expected_prev[31] )
		&& ((data_out_expected_prev[31] !== last_data_out_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[31] = data_out_expected_prev[31];
	end
	if (
		( Muxes8pra1_DOIS_t_expected_prev[0] !== 1'bx ) && ( Muxes8pra1_DOIS_t_prev[0] !== Muxes8pra1_DOIS_t_expected_prev[0] )
		&& ((Muxes8pra1_DOIS_t_expected_prev[0] !== last_Muxes8pra1_DOIS_t_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_DOIS_t[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_DOIS_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_DOIS_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Muxes8pra1_DOIS_t_exp[0] = Muxes8pra1_DOIS_t_expected_prev[0];
	end
	if (
		( Muxes8pra1_DOIS_t_expected_prev[1] !== 1'bx ) && ( Muxes8pra1_DOIS_t_prev[1] !== Muxes8pra1_DOIS_t_expected_prev[1] )
		&& ((Muxes8pra1_DOIS_t_expected_prev[1] !== last_Muxes8pra1_DOIS_t_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_DOIS_t[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_DOIS_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_DOIS_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Muxes8pra1_DOIS_t_exp[1] = Muxes8pra1_DOIS_t_expected_prev[1];
	end
	if (
		( Muxes8pra1_DOIS_t_expected_prev[2] !== 1'bx ) && ( Muxes8pra1_DOIS_t_prev[2] !== Muxes8pra1_DOIS_t_expected_prev[2] )
		&& ((Muxes8pra1_DOIS_t_expected_prev[2] !== last_Muxes8pra1_DOIS_t_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_DOIS_t[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_DOIS_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_DOIS_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Muxes8pra1_DOIS_t_exp[2] = Muxes8pra1_DOIS_t_expected_prev[2];
	end
	if (
		( Muxes8pra1_DOIS_t_expected_prev[3] !== 1'bx ) && ( Muxes8pra1_DOIS_t_prev[3] !== Muxes8pra1_DOIS_t_expected_prev[3] )
		&& ((Muxes8pra1_DOIS_t_expected_prev[3] !== last_Muxes8pra1_DOIS_t_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_DOIS_t[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_DOIS_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_DOIS_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Muxes8pra1_DOIS_t_exp[3] = Muxes8pra1_DOIS_t_expected_prev[3];
	end
	if (
		( Muxes8pra1_DOIS_t_expected_prev[4] !== 1'bx ) && ( Muxes8pra1_DOIS_t_prev[4] !== Muxes8pra1_DOIS_t_expected_prev[4] )
		&& ((Muxes8pra1_DOIS_t_expected_prev[4] !== last_Muxes8pra1_DOIS_t_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_DOIS_t[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_DOIS_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_DOIS_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Muxes8pra1_DOIS_t_exp[4] = Muxes8pra1_DOIS_t_expected_prev[4];
	end
	if (
		( Muxes8pra1_DOIS_t_expected_prev[5] !== 1'bx ) && ( Muxes8pra1_DOIS_t_prev[5] !== Muxes8pra1_DOIS_t_expected_prev[5] )
		&& ((Muxes8pra1_DOIS_t_expected_prev[5] !== last_Muxes8pra1_DOIS_t_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_DOIS_t[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_DOIS_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_DOIS_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Muxes8pra1_DOIS_t_exp[5] = Muxes8pra1_DOIS_t_expected_prev[5];
	end
	if (
		( Muxes8pra1_DOIS_t_expected_prev[6] !== 1'bx ) && ( Muxes8pra1_DOIS_t_prev[6] !== Muxes8pra1_DOIS_t_expected_prev[6] )
		&& ((Muxes8pra1_DOIS_t_expected_prev[6] !== last_Muxes8pra1_DOIS_t_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_DOIS_t[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_DOIS_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_DOIS_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Muxes8pra1_DOIS_t_exp[6] = Muxes8pra1_DOIS_t_expected_prev[6];
	end
	if (
		( Muxes8pra1_DOIS_t_expected_prev[7] !== 1'bx ) && ( Muxes8pra1_DOIS_t_prev[7] !== Muxes8pra1_DOIS_t_expected_prev[7] )
		&& ((Muxes8pra1_DOIS_t_expected_prev[7] !== last_Muxes8pra1_DOIS_t_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_DOIS_t[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_DOIS_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_DOIS_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Muxes8pra1_DOIS_t_exp[7] = Muxes8pra1_DOIS_t_expected_prev[7];
	end
	if (
		( Muxes8pra1_DOIS_t_expected_prev[8] !== 1'bx ) && ( Muxes8pra1_DOIS_t_prev[8] !== Muxes8pra1_DOIS_t_expected_prev[8] )
		&& ((Muxes8pra1_DOIS_t_expected_prev[8] !== last_Muxes8pra1_DOIS_t_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_DOIS_t[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_DOIS_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_DOIS_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Muxes8pra1_DOIS_t_exp[8] = Muxes8pra1_DOIS_t_expected_prev[8];
	end
	if (
		( Muxes8pra1_DOIS_t_expected_prev[9] !== 1'bx ) && ( Muxes8pra1_DOIS_t_prev[9] !== Muxes8pra1_DOIS_t_expected_prev[9] )
		&& ((Muxes8pra1_DOIS_t_expected_prev[9] !== last_Muxes8pra1_DOIS_t_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_DOIS_t[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_DOIS_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_DOIS_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Muxes8pra1_DOIS_t_exp[9] = Muxes8pra1_DOIS_t_expected_prev[9];
	end
	if (
		( Muxes8pra1_DOIS_t_expected_prev[10] !== 1'bx ) && ( Muxes8pra1_DOIS_t_prev[10] !== Muxes8pra1_DOIS_t_expected_prev[10] )
		&& ((Muxes8pra1_DOIS_t_expected_prev[10] !== last_Muxes8pra1_DOIS_t_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_DOIS_t[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_DOIS_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_DOIS_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Muxes8pra1_DOIS_t_exp[10] = Muxes8pra1_DOIS_t_expected_prev[10];
	end
	if (
		( Muxes8pra1_DOIS_t_expected_prev[11] !== 1'bx ) && ( Muxes8pra1_DOIS_t_prev[11] !== Muxes8pra1_DOIS_t_expected_prev[11] )
		&& ((Muxes8pra1_DOIS_t_expected_prev[11] !== last_Muxes8pra1_DOIS_t_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_DOIS_t[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_DOIS_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_DOIS_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Muxes8pra1_DOIS_t_exp[11] = Muxes8pra1_DOIS_t_expected_prev[11];
	end
	if (
		( Muxes8pra1_DOIS_t_expected_prev[12] !== 1'bx ) && ( Muxes8pra1_DOIS_t_prev[12] !== Muxes8pra1_DOIS_t_expected_prev[12] )
		&& ((Muxes8pra1_DOIS_t_expected_prev[12] !== last_Muxes8pra1_DOIS_t_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_DOIS_t[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_DOIS_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_DOIS_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Muxes8pra1_DOIS_t_exp[12] = Muxes8pra1_DOIS_t_expected_prev[12];
	end
	if (
		( Muxes8pra1_DOIS_t_expected_prev[13] !== 1'bx ) && ( Muxes8pra1_DOIS_t_prev[13] !== Muxes8pra1_DOIS_t_expected_prev[13] )
		&& ((Muxes8pra1_DOIS_t_expected_prev[13] !== last_Muxes8pra1_DOIS_t_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_DOIS_t[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_DOIS_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_DOIS_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Muxes8pra1_DOIS_t_exp[13] = Muxes8pra1_DOIS_t_expected_prev[13];
	end
	if (
		( Muxes8pra1_DOIS_t_expected_prev[14] !== 1'bx ) && ( Muxes8pra1_DOIS_t_prev[14] !== Muxes8pra1_DOIS_t_expected_prev[14] )
		&& ((Muxes8pra1_DOIS_t_expected_prev[14] !== last_Muxes8pra1_DOIS_t_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_DOIS_t[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_DOIS_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_DOIS_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Muxes8pra1_DOIS_t_exp[14] = Muxes8pra1_DOIS_t_expected_prev[14];
	end
	if (
		( Muxes8pra1_DOIS_t_expected_prev[15] !== 1'bx ) && ( Muxes8pra1_DOIS_t_prev[15] !== Muxes8pra1_DOIS_t_expected_prev[15] )
		&& ((Muxes8pra1_DOIS_t_expected_prev[15] !== last_Muxes8pra1_DOIS_t_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_DOIS_t[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_DOIS_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_DOIS_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Muxes8pra1_DOIS_t_exp[15] = Muxes8pra1_DOIS_t_expected_prev[15];
	end
	if (
		( Muxes8pra1_DOIS_t_expected_prev[16] !== 1'bx ) && ( Muxes8pra1_DOIS_t_prev[16] !== Muxes8pra1_DOIS_t_expected_prev[16] )
		&& ((Muxes8pra1_DOIS_t_expected_prev[16] !== last_Muxes8pra1_DOIS_t_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_DOIS_t[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_DOIS_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_DOIS_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Muxes8pra1_DOIS_t_exp[16] = Muxes8pra1_DOIS_t_expected_prev[16];
	end
	if (
		( Muxes8pra1_DOIS_t_expected_prev[17] !== 1'bx ) && ( Muxes8pra1_DOIS_t_prev[17] !== Muxes8pra1_DOIS_t_expected_prev[17] )
		&& ((Muxes8pra1_DOIS_t_expected_prev[17] !== last_Muxes8pra1_DOIS_t_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_DOIS_t[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_DOIS_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_DOIS_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Muxes8pra1_DOIS_t_exp[17] = Muxes8pra1_DOIS_t_expected_prev[17];
	end
	if (
		( Muxes8pra1_DOIS_t_expected_prev[18] !== 1'bx ) && ( Muxes8pra1_DOIS_t_prev[18] !== Muxes8pra1_DOIS_t_expected_prev[18] )
		&& ((Muxes8pra1_DOIS_t_expected_prev[18] !== last_Muxes8pra1_DOIS_t_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_DOIS_t[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_DOIS_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_DOIS_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Muxes8pra1_DOIS_t_exp[18] = Muxes8pra1_DOIS_t_expected_prev[18];
	end
	if (
		( Muxes8pra1_DOIS_t_expected_prev[19] !== 1'bx ) && ( Muxes8pra1_DOIS_t_prev[19] !== Muxes8pra1_DOIS_t_expected_prev[19] )
		&& ((Muxes8pra1_DOIS_t_expected_prev[19] !== last_Muxes8pra1_DOIS_t_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_DOIS_t[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_DOIS_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_DOIS_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Muxes8pra1_DOIS_t_exp[19] = Muxes8pra1_DOIS_t_expected_prev[19];
	end
	if (
		( Muxes8pra1_DOIS_t_expected_prev[20] !== 1'bx ) && ( Muxes8pra1_DOIS_t_prev[20] !== Muxes8pra1_DOIS_t_expected_prev[20] )
		&& ((Muxes8pra1_DOIS_t_expected_prev[20] !== last_Muxes8pra1_DOIS_t_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_DOIS_t[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_DOIS_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_DOIS_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Muxes8pra1_DOIS_t_exp[20] = Muxes8pra1_DOIS_t_expected_prev[20];
	end
	if (
		( Muxes8pra1_DOIS_t_expected_prev[21] !== 1'bx ) && ( Muxes8pra1_DOIS_t_prev[21] !== Muxes8pra1_DOIS_t_expected_prev[21] )
		&& ((Muxes8pra1_DOIS_t_expected_prev[21] !== last_Muxes8pra1_DOIS_t_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_DOIS_t[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_DOIS_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_DOIS_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Muxes8pra1_DOIS_t_exp[21] = Muxes8pra1_DOIS_t_expected_prev[21];
	end
	if (
		( Muxes8pra1_DOIS_t_expected_prev[22] !== 1'bx ) && ( Muxes8pra1_DOIS_t_prev[22] !== Muxes8pra1_DOIS_t_expected_prev[22] )
		&& ((Muxes8pra1_DOIS_t_expected_prev[22] !== last_Muxes8pra1_DOIS_t_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_DOIS_t[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_DOIS_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_DOIS_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Muxes8pra1_DOIS_t_exp[22] = Muxes8pra1_DOIS_t_expected_prev[22];
	end
	if (
		( Muxes8pra1_DOIS_t_expected_prev[23] !== 1'bx ) && ( Muxes8pra1_DOIS_t_prev[23] !== Muxes8pra1_DOIS_t_expected_prev[23] )
		&& ((Muxes8pra1_DOIS_t_expected_prev[23] !== last_Muxes8pra1_DOIS_t_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_DOIS_t[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_DOIS_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_DOIS_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Muxes8pra1_DOIS_t_exp[23] = Muxes8pra1_DOIS_t_expected_prev[23];
	end
	if (
		( Muxes8pra1_DOIS_t_expected_prev[24] !== 1'bx ) && ( Muxes8pra1_DOIS_t_prev[24] !== Muxes8pra1_DOIS_t_expected_prev[24] )
		&& ((Muxes8pra1_DOIS_t_expected_prev[24] !== last_Muxes8pra1_DOIS_t_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_DOIS_t[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_DOIS_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_DOIS_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Muxes8pra1_DOIS_t_exp[24] = Muxes8pra1_DOIS_t_expected_prev[24];
	end
	if (
		( Muxes8pra1_DOIS_t_expected_prev[25] !== 1'bx ) && ( Muxes8pra1_DOIS_t_prev[25] !== Muxes8pra1_DOIS_t_expected_prev[25] )
		&& ((Muxes8pra1_DOIS_t_expected_prev[25] !== last_Muxes8pra1_DOIS_t_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_DOIS_t[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_DOIS_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_DOIS_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Muxes8pra1_DOIS_t_exp[25] = Muxes8pra1_DOIS_t_expected_prev[25];
	end
	if (
		( Muxes8pra1_DOIS_t_expected_prev[26] !== 1'bx ) && ( Muxes8pra1_DOIS_t_prev[26] !== Muxes8pra1_DOIS_t_expected_prev[26] )
		&& ((Muxes8pra1_DOIS_t_expected_prev[26] !== last_Muxes8pra1_DOIS_t_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_DOIS_t[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_DOIS_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_DOIS_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Muxes8pra1_DOIS_t_exp[26] = Muxes8pra1_DOIS_t_expected_prev[26];
	end
	if (
		( Muxes8pra1_DOIS_t_expected_prev[27] !== 1'bx ) && ( Muxes8pra1_DOIS_t_prev[27] !== Muxes8pra1_DOIS_t_expected_prev[27] )
		&& ((Muxes8pra1_DOIS_t_expected_prev[27] !== last_Muxes8pra1_DOIS_t_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_DOIS_t[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_DOIS_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_DOIS_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Muxes8pra1_DOIS_t_exp[27] = Muxes8pra1_DOIS_t_expected_prev[27];
	end
	if (
		( Muxes8pra1_DOIS_t_expected_prev[28] !== 1'bx ) && ( Muxes8pra1_DOIS_t_prev[28] !== Muxes8pra1_DOIS_t_expected_prev[28] )
		&& ((Muxes8pra1_DOIS_t_expected_prev[28] !== last_Muxes8pra1_DOIS_t_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_DOIS_t[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_DOIS_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_DOIS_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Muxes8pra1_DOIS_t_exp[28] = Muxes8pra1_DOIS_t_expected_prev[28];
	end
	if (
		( Muxes8pra1_DOIS_t_expected_prev[29] !== 1'bx ) && ( Muxes8pra1_DOIS_t_prev[29] !== Muxes8pra1_DOIS_t_expected_prev[29] )
		&& ((Muxes8pra1_DOIS_t_expected_prev[29] !== last_Muxes8pra1_DOIS_t_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_DOIS_t[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_DOIS_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_DOIS_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Muxes8pra1_DOIS_t_exp[29] = Muxes8pra1_DOIS_t_expected_prev[29];
	end
	if (
		( Muxes8pra1_DOIS_t_expected_prev[30] !== 1'bx ) && ( Muxes8pra1_DOIS_t_prev[30] !== Muxes8pra1_DOIS_t_expected_prev[30] )
		&& ((Muxes8pra1_DOIS_t_expected_prev[30] !== last_Muxes8pra1_DOIS_t_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_DOIS_t[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_DOIS_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_DOIS_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Muxes8pra1_DOIS_t_exp[30] = Muxes8pra1_DOIS_t_expected_prev[30];
	end
	if (
		( Muxes8pra1_DOIS_t_expected_prev[31] !== 1'bx ) && ( Muxes8pra1_DOIS_t_prev[31] !== Muxes8pra1_DOIS_t_expected_prev[31] )
		&& ((Muxes8pra1_DOIS_t_expected_prev[31] !== last_Muxes8pra1_DOIS_t_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_DOIS_t[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_DOIS_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_DOIS_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Muxes8pra1_DOIS_t_exp[31] = Muxes8pra1_DOIS_t_expected_prev[31];
	end
	if (
		( Muxes8pra1_TRES_t_expected_prev[0] !== 1'bx ) && ( Muxes8pra1_TRES_t_prev[0] !== Muxes8pra1_TRES_t_expected_prev[0] )
		&& ((Muxes8pra1_TRES_t_expected_prev[0] !== last_Muxes8pra1_TRES_t_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_TRES_t[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_TRES_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_TRES_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Muxes8pra1_TRES_t_exp[0] = Muxes8pra1_TRES_t_expected_prev[0];
	end
	if (
		( Muxes8pra1_TRES_t_expected_prev[1] !== 1'bx ) && ( Muxes8pra1_TRES_t_prev[1] !== Muxes8pra1_TRES_t_expected_prev[1] )
		&& ((Muxes8pra1_TRES_t_expected_prev[1] !== last_Muxes8pra1_TRES_t_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_TRES_t[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_TRES_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_TRES_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Muxes8pra1_TRES_t_exp[1] = Muxes8pra1_TRES_t_expected_prev[1];
	end
	if (
		( Muxes8pra1_TRES_t_expected_prev[2] !== 1'bx ) && ( Muxes8pra1_TRES_t_prev[2] !== Muxes8pra1_TRES_t_expected_prev[2] )
		&& ((Muxes8pra1_TRES_t_expected_prev[2] !== last_Muxes8pra1_TRES_t_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_TRES_t[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_TRES_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_TRES_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Muxes8pra1_TRES_t_exp[2] = Muxes8pra1_TRES_t_expected_prev[2];
	end
	if (
		( Muxes8pra1_TRES_t_expected_prev[3] !== 1'bx ) && ( Muxes8pra1_TRES_t_prev[3] !== Muxes8pra1_TRES_t_expected_prev[3] )
		&& ((Muxes8pra1_TRES_t_expected_prev[3] !== last_Muxes8pra1_TRES_t_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_TRES_t[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_TRES_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_TRES_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Muxes8pra1_TRES_t_exp[3] = Muxes8pra1_TRES_t_expected_prev[3];
	end
	if (
		( Muxes8pra1_TRES_t_expected_prev[4] !== 1'bx ) && ( Muxes8pra1_TRES_t_prev[4] !== Muxes8pra1_TRES_t_expected_prev[4] )
		&& ((Muxes8pra1_TRES_t_expected_prev[4] !== last_Muxes8pra1_TRES_t_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_TRES_t[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_TRES_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_TRES_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Muxes8pra1_TRES_t_exp[4] = Muxes8pra1_TRES_t_expected_prev[4];
	end
	if (
		( Muxes8pra1_TRES_t_expected_prev[5] !== 1'bx ) && ( Muxes8pra1_TRES_t_prev[5] !== Muxes8pra1_TRES_t_expected_prev[5] )
		&& ((Muxes8pra1_TRES_t_expected_prev[5] !== last_Muxes8pra1_TRES_t_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_TRES_t[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_TRES_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_TRES_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Muxes8pra1_TRES_t_exp[5] = Muxes8pra1_TRES_t_expected_prev[5];
	end
	if (
		( Muxes8pra1_TRES_t_expected_prev[6] !== 1'bx ) && ( Muxes8pra1_TRES_t_prev[6] !== Muxes8pra1_TRES_t_expected_prev[6] )
		&& ((Muxes8pra1_TRES_t_expected_prev[6] !== last_Muxes8pra1_TRES_t_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_TRES_t[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_TRES_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_TRES_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Muxes8pra1_TRES_t_exp[6] = Muxes8pra1_TRES_t_expected_prev[6];
	end
	if (
		( Muxes8pra1_TRES_t_expected_prev[7] !== 1'bx ) && ( Muxes8pra1_TRES_t_prev[7] !== Muxes8pra1_TRES_t_expected_prev[7] )
		&& ((Muxes8pra1_TRES_t_expected_prev[7] !== last_Muxes8pra1_TRES_t_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_TRES_t[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_TRES_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_TRES_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Muxes8pra1_TRES_t_exp[7] = Muxes8pra1_TRES_t_expected_prev[7];
	end
	if (
		( Muxes8pra1_TRES_t_expected_prev[8] !== 1'bx ) && ( Muxes8pra1_TRES_t_prev[8] !== Muxes8pra1_TRES_t_expected_prev[8] )
		&& ((Muxes8pra1_TRES_t_expected_prev[8] !== last_Muxes8pra1_TRES_t_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_TRES_t[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_TRES_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_TRES_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Muxes8pra1_TRES_t_exp[8] = Muxes8pra1_TRES_t_expected_prev[8];
	end
	if (
		( Muxes8pra1_TRES_t_expected_prev[9] !== 1'bx ) && ( Muxes8pra1_TRES_t_prev[9] !== Muxes8pra1_TRES_t_expected_prev[9] )
		&& ((Muxes8pra1_TRES_t_expected_prev[9] !== last_Muxes8pra1_TRES_t_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_TRES_t[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_TRES_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_TRES_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Muxes8pra1_TRES_t_exp[9] = Muxes8pra1_TRES_t_expected_prev[9];
	end
	if (
		( Muxes8pra1_TRES_t_expected_prev[10] !== 1'bx ) && ( Muxes8pra1_TRES_t_prev[10] !== Muxes8pra1_TRES_t_expected_prev[10] )
		&& ((Muxes8pra1_TRES_t_expected_prev[10] !== last_Muxes8pra1_TRES_t_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_TRES_t[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_TRES_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_TRES_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Muxes8pra1_TRES_t_exp[10] = Muxes8pra1_TRES_t_expected_prev[10];
	end
	if (
		( Muxes8pra1_TRES_t_expected_prev[11] !== 1'bx ) && ( Muxes8pra1_TRES_t_prev[11] !== Muxes8pra1_TRES_t_expected_prev[11] )
		&& ((Muxes8pra1_TRES_t_expected_prev[11] !== last_Muxes8pra1_TRES_t_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_TRES_t[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_TRES_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_TRES_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Muxes8pra1_TRES_t_exp[11] = Muxes8pra1_TRES_t_expected_prev[11];
	end
	if (
		( Muxes8pra1_TRES_t_expected_prev[12] !== 1'bx ) && ( Muxes8pra1_TRES_t_prev[12] !== Muxes8pra1_TRES_t_expected_prev[12] )
		&& ((Muxes8pra1_TRES_t_expected_prev[12] !== last_Muxes8pra1_TRES_t_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_TRES_t[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_TRES_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_TRES_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Muxes8pra1_TRES_t_exp[12] = Muxes8pra1_TRES_t_expected_prev[12];
	end
	if (
		( Muxes8pra1_TRES_t_expected_prev[13] !== 1'bx ) && ( Muxes8pra1_TRES_t_prev[13] !== Muxes8pra1_TRES_t_expected_prev[13] )
		&& ((Muxes8pra1_TRES_t_expected_prev[13] !== last_Muxes8pra1_TRES_t_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_TRES_t[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_TRES_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_TRES_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Muxes8pra1_TRES_t_exp[13] = Muxes8pra1_TRES_t_expected_prev[13];
	end
	if (
		( Muxes8pra1_TRES_t_expected_prev[14] !== 1'bx ) && ( Muxes8pra1_TRES_t_prev[14] !== Muxes8pra1_TRES_t_expected_prev[14] )
		&& ((Muxes8pra1_TRES_t_expected_prev[14] !== last_Muxes8pra1_TRES_t_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_TRES_t[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_TRES_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_TRES_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Muxes8pra1_TRES_t_exp[14] = Muxes8pra1_TRES_t_expected_prev[14];
	end
	if (
		( Muxes8pra1_TRES_t_expected_prev[15] !== 1'bx ) && ( Muxes8pra1_TRES_t_prev[15] !== Muxes8pra1_TRES_t_expected_prev[15] )
		&& ((Muxes8pra1_TRES_t_expected_prev[15] !== last_Muxes8pra1_TRES_t_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_TRES_t[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_TRES_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_TRES_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Muxes8pra1_TRES_t_exp[15] = Muxes8pra1_TRES_t_expected_prev[15];
	end
	if (
		( Muxes8pra1_TRES_t_expected_prev[16] !== 1'bx ) && ( Muxes8pra1_TRES_t_prev[16] !== Muxes8pra1_TRES_t_expected_prev[16] )
		&& ((Muxes8pra1_TRES_t_expected_prev[16] !== last_Muxes8pra1_TRES_t_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_TRES_t[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_TRES_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_TRES_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Muxes8pra1_TRES_t_exp[16] = Muxes8pra1_TRES_t_expected_prev[16];
	end
	if (
		( Muxes8pra1_TRES_t_expected_prev[17] !== 1'bx ) && ( Muxes8pra1_TRES_t_prev[17] !== Muxes8pra1_TRES_t_expected_prev[17] )
		&& ((Muxes8pra1_TRES_t_expected_prev[17] !== last_Muxes8pra1_TRES_t_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_TRES_t[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_TRES_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_TRES_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Muxes8pra1_TRES_t_exp[17] = Muxes8pra1_TRES_t_expected_prev[17];
	end
	if (
		( Muxes8pra1_TRES_t_expected_prev[18] !== 1'bx ) && ( Muxes8pra1_TRES_t_prev[18] !== Muxes8pra1_TRES_t_expected_prev[18] )
		&& ((Muxes8pra1_TRES_t_expected_prev[18] !== last_Muxes8pra1_TRES_t_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_TRES_t[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_TRES_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_TRES_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Muxes8pra1_TRES_t_exp[18] = Muxes8pra1_TRES_t_expected_prev[18];
	end
	if (
		( Muxes8pra1_TRES_t_expected_prev[19] !== 1'bx ) && ( Muxes8pra1_TRES_t_prev[19] !== Muxes8pra1_TRES_t_expected_prev[19] )
		&& ((Muxes8pra1_TRES_t_expected_prev[19] !== last_Muxes8pra1_TRES_t_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_TRES_t[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_TRES_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_TRES_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Muxes8pra1_TRES_t_exp[19] = Muxes8pra1_TRES_t_expected_prev[19];
	end
	if (
		( Muxes8pra1_TRES_t_expected_prev[20] !== 1'bx ) && ( Muxes8pra1_TRES_t_prev[20] !== Muxes8pra1_TRES_t_expected_prev[20] )
		&& ((Muxes8pra1_TRES_t_expected_prev[20] !== last_Muxes8pra1_TRES_t_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_TRES_t[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_TRES_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_TRES_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Muxes8pra1_TRES_t_exp[20] = Muxes8pra1_TRES_t_expected_prev[20];
	end
	if (
		( Muxes8pra1_TRES_t_expected_prev[21] !== 1'bx ) && ( Muxes8pra1_TRES_t_prev[21] !== Muxes8pra1_TRES_t_expected_prev[21] )
		&& ((Muxes8pra1_TRES_t_expected_prev[21] !== last_Muxes8pra1_TRES_t_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_TRES_t[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_TRES_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_TRES_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Muxes8pra1_TRES_t_exp[21] = Muxes8pra1_TRES_t_expected_prev[21];
	end
	if (
		( Muxes8pra1_TRES_t_expected_prev[22] !== 1'bx ) && ( Muxes8pra1_TRES_t_prev[22] !== Muxes8pra1_TRES_t_expected_prev[22] )
		&& ((Muxes8pra1_TRES_t_expected_prev[22] !== last_Muxes8pra1_TRES_t_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_TRES_t[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_TRES_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_TRES_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Muxes8pra1_TRES_t_exp[22] = Muxes8pra1_TRES_t_expected_prev[22];
	end
	if (
		( Muxes8pra1_TRES_t_expected_prev[23] !== 1'bx ) && ( Muxes8pra1_TRES_t_prev[23] !== Muxes8pra1_TRES_t_expected_prev[23] )
		&& ((Muxes8pra1_TRES_t_expected_prev[23] !== last_Muxes8pra1_TRES_t_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_TRES_t[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_TRES_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_TRES_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Muxes8pra1_TRES_t_exp[23] = Muxes8pra1_TRES_t_expected_prev[23];
	end
	if (
		( Muxes8pra1_TRES_t_expected_prev[24] !== 1'bx ) && ( Muxes8pra1_TRES_t_prev[24] !== Muxes8pra1_TRES_t_expected_prev[24] )
		&& ((Muxes8pra1_TRES_t_expected_prev[24] !== last_Muxes8pra1_TRES_t_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_TRES_t[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_TRES_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_TRES_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Muxes8pra1_TRES_t_exp[24] = Muxes8pra1_TRES_t_expected_prev[24];
	end
	if (
		( Muxes8pra1_TRES_t_expected_prev[25] !== 1'bx ) && ( Muxes8pra1_TRES_t_prev[25] !== Muxes8pra1_TRES_t_expected_prev[25] )
		&& ((Muxes8pra1_TRES_t_expected_prev[25] !== last_Muxes8pra1_TRES_t_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_TRES_t[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_TRES_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_TRES_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Muxes8pra1_TRES_t_exp[25] = Muxes8pra1_TRES_t_expected_prev[25];
	end
	if (
		( Muxes8pra1_TRES_t_expected_prev[26] !== 1'bx ) && ( Muxes8pra1_TRES_t_prev[26] !== Muxes8pra1_TRES_t_expected_prev[26] )
		&& ((Muxes8pra1_TRES_t_expected_prev[26] !== last_Muxes8pra1_TRES_t_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_TRES_t[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_TRES_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_TRES_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Muxes8pra1_TRES_t_exp[26] = Muxes8pra1_TRES_t_expected_prev[26];
	end
	if (
		( Muxes8pra1_TRES_t_expected_prev[27] !== 1'bx ) && ( Muxes8pra1_TRES_t_prev[27] !== Muxes8pra1_TRES_t_expected_prev[27] )
		&& ((Muxes8pra1_TRES_t_expected_prev[27] !== last_Muxes8pra1_TRES_t_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_TRES_t[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_TRES_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_TRES_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Muxes8pra1_TRES_t_exp[27] = Muxes8pra1_TRES_t_expected_prev[27];
	end
	if (
		( Muxes8pra1_TRES_t_expected_prev[28] !== 1'bx ) && ( Muxes8pra1_TRES_t_prev[28] !== Muxes8pra1_TRES_t_expected_prev[28] )
		&& ((Muxes8pra1_TRES_t_expected_prev[28] !== last_Muxes8pra1_TRES_t_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_TRES_t[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_TRES_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_TRES_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Muxes8pra1_TRES_t_exp[28] = Muxes8pra1_TRES_t_expected_prev[28];
	end
	if (
		( Muxes8pra1_TRES_t_expected_prev[29] !== 1'bx ) && ( Muxes8pra1_TRES_t_prev[29] !== Muxes8pra1_TRES_t_expected_prev[29] )
		&& ((Muxes8pra1_TRES_t_expected_prev[29] !== last_Muxes8pra1_TRES_t_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_TRES_t[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_TRES_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_TRES_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Muxes8pra1_TRES_t_exp[29] = Muxes8pra1_TRES_t_expected_prev[29];
	end
	if (
		( Muxes8pra1_TRES_t_expected_prev[30] !== 1'bx ) && ( Muxes8pra1_TRES_t_prev[30] !== Muxes8pra1_TRES_t_expected_prev[30] )
		&& ((Muxes8pra1_TRES_t_expected_prev[30] !== last_Muxes8pra1_TRES_t_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_TRES_t[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_TRES_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_TRES_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Muxes8pra1_TRES_t_exp[30] = Muxes8pra1_TRES_t_expected_prev[30];
	end
	if (
		( Muxes8pra1_TRES_t_expected_prev[31] !== 1'bx ) && ( Muxes8pra1_TRES_t_prev[31] !== Muxes8pra1_TRES_t_expected_prev[31] )
		&& ((Muxes8pra1_TRES_t_expected_prev[31] !== last_Muxes8pra1_TRES_t_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_TRES_t[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_TRES_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_TRES_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Muxes8pra1_TRES_t_exp[31] = Muxes8pra1_TRES_t_expected_prev[31];
	end
	if (
		( Muxes8pra1_UM_t_expected_prev[0] !== 1'bx ) && ( Muxes8pra1_UM_t_prev[0] !== Muxes8pra1_UM_t_expected_prev[0] )
		&& ((Muxes8pra1_UM_t_expected_prev[0] !== last_Muxes8pra1_UM_t_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_UM_t[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_UM_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_UM_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Muxes8pra1_UM_t_exp[0] = Muxes8pra1_UM_t_expected_prev[0];
	end
	if (
		( Muxes8pra1_UM_t_expected_prev[1] !== 1'bx ) && ( Muxes8pra1_UM_t_prev[1] !== Muxes8pra1_UM_t_expected_prev[1] )
		&& ((Muxes8pra1_UM_t_expected_prev[1] !== last_Muxes8pra1_UM_t_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_UM_t[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_UM_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_UM_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Muxes8pra1_UM_t_exp[1] = Muxes8pra1_UM_t_expected_prev[1];
	end
	if (
		( Muxes8pra1_UM_t_expected_prev[2] !== 1'bx ) && ( Muxes8pra1_UM_t_prev[2] !== Muxes8pra1_UM_t_expected_prev[2] )
		&& ((Muxes8pra1_UM_t_expected_prev[2] !== last_Muxes8pra1_UM_t_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_UM_t[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_UM_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_UM_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Muxes8pra1_UM_t_exp[2] = Muxes8pra1_UM_t_expected_prev[2];
	end
	if (
		( Muxes8pra1_UM_t_expected_prev[3] !== 1'bx ) && ( Muxes8pra1_UM_t_prev[3] !== Muxes8pra1_UM_t_expected_prev[3] )
		&& ((Muxes8pra1_UM_t_expected_prev[3] !== last_Muxes8pra1_UM_t_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_UM_t[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_UM_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_UM_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Muxes8pra1_UM_t_exp[3] = Muxes8pra1_UM_t_expected_prev[3];
	end
	if (
		( Muxes8pra1_UM_t_expected_prev[4] !== 1'bx ) && ( Muxes8pra1_UM_t_prev[4] !== Muxes8pra1_UM_t_expected_prev[4] )
		&& ((Muxes8pra1_UM_t_expected_prev[4] !== last_Muxes8pra1_UM_t_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_UM_t[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_UM_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_UM_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Muxes8pra1_UM_t_exp[4] = Muxes8pra1_UM_t_expected_prev[4];
	end
	if (
		( Muxes8pra1_UM_t_expected_prev[5] !== 1'bx ) && ( Muxes8pra1_UM_t_prev[5] !== Muxes8pra1_UM_t_expected_prev[5] )
		&& ((Muxes8pra1_UM_t_expected_prev[5] !== last_Muxes8pra1_UM_t_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_UM_t[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_UM_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_UM_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Muxes8pra1_UM_t_exp[5] = Muxes8pra1_UM_t_expected_prev[5];
	end
	if (
		( Muxes8pra1_UM_t_expected_prev[6] !== 1'bx ) && ( Muxes8pra1_UM_t_prev[6] !== Muxes8pra1_UM_t_expected_prev[6] )
		&& ((Muxes8pra1_UM_t_expected_prev[6] !== last_Muxes8pra1_UM_t_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_UM_t[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_UM_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_UM_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Muxes8pra1_UM_t_exp[6] = Muxes8pra1_UM_t_expected_prev[6];
	end
	if (
		( Muxes8pra1_UM_t_expected_prev[7] !== 1'bx ) && ( Muxes8pra1_UM_t_prev[7] !== Muxes8pra1_UM_t_expected_prev[7] )
		&& ((Muxes8pra1_UM_t_expected_prev[7] !== last_Muxes8pra1_UM_t_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_UM_t[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_UM_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_UM_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Muxes8pra1_UM_t_exp[7] = Muxes8pra1_UM_t_expected_prev[7];
	end
	if (
		( Muxes8pra1_UM_t_expected_prev[8] !== 1'bx ) && ( Muxes8pra1_UM_t_prev[8] !== Muxes8pra1_UM_t_expected_prev[8] )
		&& ((Muxes8pra1_UM_t_expected_prev[8] !== last_Muxes8pra1_UM_t_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_UM_t[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_UM_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_UM_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Muxes8pra1_UM_t_exp[8] = Muxes8pra1_UM_t_expected_prev[8];
	end
	if (
		( Muxes8pra1_UM_t_expected_prev[9] !== 1'bx ) && ( Muxes8pra1_UM_t_prev[9] !== Muxes8pra1_UM_t_expected_prev[9] )
		&& ((Muxes8pra1_UM_t_expected_prev[9] !== last_Muxes8pra1_UM_t_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_UM_t[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_UM_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_UM_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Muxes8pra1_UM_t_exp[9] = Muxes8pra1_UM_t_expected_prev[9];
	end
	if (
		( Muxes8pra1_UM_t_expected_prev[10] !== 1'bx ) && ( Muxes8pra1_UM_t_prev[10] !== Muxes8pra1_UM_t_expected_prev[10] )
		&& ((Muxes8pra1_UM_t_expected_prev[10] !== last_Muxes8pra1_UM_t_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_UM_t[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_UM_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_UM_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Muxes8pra1_UM_t_exp[10] = Muxes8pra1_UM_t_expected_prev[10];
	end
	if (
		( Muxes8pra1_UM_t_expected_prev[11] !== 1'bx ) && ( Muxes8pra1_UM_t_prev[11] !== Muxes8pra1_UM_t_expected_prev[11] )
		&& ((Muxes8pra1_UM_t_expected_prev[11] !== last_Muxes8pra1_UM_t_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_UM_t[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_UM_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_UM_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Muxes8pra1_UM_t_exp[11] = Muxes8pra1_UM_t_expected_prev[11];
	end
	if (
		( Muxes8pra1_UM_t_expected_prev[12] !== 1'bx ) && ( Muxes8pra1_UM_t_prev[12] !== Muxes8pra1_UM_t_expected_prev[12] )
		&& ((Muxes8pra1_UM_t_expected_prev[12] !== last_Muxes8pra1_UM_t_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_UM_t[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_UM_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_UM_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Muxes8pra1_UM_t_exp[12] = Muxes8pra1_UM_t_expected_prev[12];
	end
	if (
		( Muxes8pra1_UM_t_expected_prev[13] !== 1'bx ) && ( Muxes8pra1_UM_t_prev[13] !== Muxes8pra1_UM_t_expected_prev[13] )
		&& ((Muxes8pra1_UM_t_expected_prev[13] !== last_Muxes8pra1_UM_t_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_UM_t[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_UM_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_UM_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Muxes8pra1_UM_t_exp[13] = Muxes8pra1_UM_t_expected_prev[13];
	end
	if (
		( Muxes8pra1_UM_t_expected_prev[14] !== 1'bx ) && ( Muxes8pra1_UM_t_prev[14] !== Muxes8pra1_UM_t_expected_prev[14] )
		&& ((Muxes8pra1_UM_t_expected_prev[14] !== last_Muxes8pra1_UM_t_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_UM_t[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_UM_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_UM_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Muxes8pra1_UM_t_exp[14] = Muxes8pra1_UM_t_expected_prev[14];
	end
	if (
		( Muxes8pra1_UM_t_expected_prev[15] !== 1'bx ) && ( Muxes8pra1_UM_t_prev[15] !== Muxes8pra1_UM_t_expected_prev[15] )
		&& ((Muxes8pra1_UM_t_expected_prev[15] !== last_Muxes8pra1_UM_t_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_UM_t[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_UM_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_UM_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Muxes8pra1_UM_t_exp[15] = Muxes8pra1_UM_t_expected_prev[15];
	end
	if (
		( Muxes8pra1_UM_t_expected_prev[16] !== 1'bx ) && ( Muxes8pra1_UM_t_prev[16] !== Muxes8pra1_UM_t_expected_prev[16] )
		&& ((Muxes8pra1_UM_t_expected_prev[16] !== last_Muxes8pra1_UM_t_exp[16]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_UM_t[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_UM_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_UM_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Muxes8pra1_UM_t_exp[16] = Muxes8pra1_UM_t_expected_prev[16];
	end
	if (
		( Muxes8pra1_UM_t_expected_prev[17] !== 1'bx ) && ( Muxes8pra1_UM_t_prev[17] !== Muxes8pra1_UM_t_expected_prev[17] )
		&& ((Muxes8pra1_UM_t_expected_prev[17] !== last_Muxes8pra1_UM_t_exp[17]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_UM_t[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_UM_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_UM_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Muxes8pra1_UM_t_exp[17] = Muxes8pra1_UM_t_expected_prev[17];
	end
	if (
		( Muxes8pra1_UM_t_expected_prev[18] !== 1'bx ) && ( Muxes8pra1_UM_t_prev[18] !== Muxes8pra1_UM_t_expected_prev[18] )
		&& ((Muxes8pra1_UM_t_expected_prev[18] !== last_Muxes8pra1_UM_t_exp[18]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_UM_t[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_UM_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_UM_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Muxes8pra1_UM_t_exp[18] = Muxes8pra1_UM_t_expected_prev[18];
	end
	if (
		( Muxes8pra1_UM_t_expected_prev[19] !== 1'bx ) && ( Muxes8pra1_UM_t_prev[19] !== Muxes8pra1_UM_t_expected_prev[19] )
		&& ((Muxes8pra1_UM_t_expected_prev[19] !== last_Muxes8pra1_UM_t_exp[19]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_UM_t[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_UM_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_UM_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Muxes8pra1_UM_t_exp[19] = Muxes8pra1_UM_t_expected_prev[19];
	end
	if (
		( Muxes8pra1_UM_t_expected_prev[20] !== 1'bx ) && ( Muxes8pra1_UM_t_prev[20] !== Muxes8pra1_UM_t_expected_prev[20] )
		&& ((Muxes8pra1_UM_t_expected_prev[20] !== last_Muxes8pra1_UM_t_exp[20]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_UM_t[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_UM_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_UM_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Muxes8pra1_UM_t_exp[20] = Muxes8pra1_UM_t_expected_prev[20];
	end
	if (
		( Muxes8pra1_UM_t_expected_prev[21] !== 1'bx ) && ( Muxes8pra1_UM_t_prev[21] !== Muxes8pra1_UM_t_expected_prev[21] )
		&& ((Muxes8pra1_UM_t_expected_prev[21] !== last_Muxes8pra1_UM_t_exp[21]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_UM_t[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_UM_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_UM_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Muxes8pra1_UM_t_exp[21] = Muxes8pra1_UM_t_expected_prev[21];
	end
	if (
		( Muxes8pra1_UM_t_expected_prev[22] !== 1'bx ) && ( Muxes8pra1_UM_t_prev[22] !== Muxes8pra1_UM_t_expected_prev[22] )
		&& ((Muxes8pra1_UM_t_expected_prev[22] !== last_Muxes8pra1_UM_t_exp[22]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_UM_t[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_UM_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_UM_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Muxes8pra1_UM_t_exp[22] = Muxes8pra1_UM_t_expected_prev[22];
	end
	if (
		( Muxes8pra1_UM_t_expected_prev[23] !== 1'bx ) && ( Muxes8pra1_UM_t_prev[23] !== Muxes8pra1_UM_t_expected_prev[23] )
		&& ((Muxes8pra1_UM_t_expected_prev[23] !== last_Muxes8pra1_UM_t_exp[23]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_UM_t[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_UM_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_UM_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Muxes8pra1_UM_t_exp[23] = Muxes8pra1_UM_t_expected_prev[23];
	end
	if (
		( Muxes8pra1_UM_t_expected_prev[24] !== 1'bx ) && ( Muxes8pra1_UM_t_prev[24] !== Muxes8pra1_UM_t_expected_prev[24] )
		&& ((Muxes8pra1_UM_t_expected_prev[24] !== last_Muxes8pra1_UM_t_exp[24]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_UM_t[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_UM_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_UM_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Muxes8pra1_UM_t_exp[24] = Muxes8pra1_UM_t_expected_prev[24];
	end
	if (
		( Muxes8pra1_UM_t_expected_prev[25] !== 1'bx ) && ( Muxes8pra1_UM_t_prev[25] !== Muxes8pra1_UM_t_expected_prev[25] )
		&& ((Muxes8pra1_UM_t_expected_prev[25] !== last_Muxes8pra1_UM_t_exp[25]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_UM_t[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_UM_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_UM_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Muxes8pra1_UM_t_exp[25] = Muxes8pra1_UM_t_expected_prev[25];
	end
	if (
		( Muxes8pra1_UM_t_expected_prev[26] !== 1'bx ) && ( Muxes8pra1_UM_t_prev[26] !== Muxes8pra1_UM_t_expected_prev[26] )
		&& ((Muxes8pra1_UM_t_expected_prev[26] !== last_Muxes8pra1_UM_t_exp[26]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_UM_t[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_UM_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_UM_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Muxes8pra1_UM_t_exp[26] = Muxes8pra1_UM_t_expected_prev[26];
	end
	if (
		( Muxes8pra1_UM_t_expected_prev[27] !== 1'bx ) && ( Muxes8pra1_UM_t_prev[27] !== Muxes8pra1_UM_t_expected_prev[27] )
		&& ((Muxes8pra1_UM_t_expected_prev[27] !== last_Muxes8pra1_UM_t_exp[27]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_UM_t[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_UM_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_UM_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Muxes8pra1_UM_t_exp[27] = Muxes8pra1_UM_t_expected_prev[27];
	end
	if (
		( Muxes8pra1_UM_t_expected_prev[28] !== 1'bx ) && ( Muxes8pra1_UM_t_prev[28] !== Muxes8pra1_UM_t_expected_prev[28] )
		&& ((Muxes8pra1_UM_t_expected_prev[28] !== last_Muxes8pra1_UM_t_exp[28]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_UM_t[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_UM_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_UM_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Muxes8pra1_UM_t_exp[28] = Muxes8pra1_UM_t_expected_prev[28];
	end
	if (
		( Muxes8pra1_UM_t_expected_prev[29] !== 1'bx ) && ( Muxes8pra1_UM_t_prev[29] !== Muxes8pra1_UM_t_expected_prev[29] )
		&& ((Muxes8pra1_UM_t_expected_prev[29] !== last_Muxes8pra1_UM_t_exp[29]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_UM_t[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_UM_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_UM_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Muxes8pra1_UM_t_exp[29] = Muxes8pra1_UM_t_expected_prev[29];
	end
	if (
		( Muxes8pra1_UM_t_expected_prev[30] !== 1'bx ) && ( Muxes8pra1_UM_t_prev[30] !== Muxes8pra1_UM_t_expected_prev[30] )
		&& ((Muxes8pra1_UM_t_expected_prev[30] !== last_Muxes8pra1_UM_t_exp[30]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_UM_t[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_UM_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_UM_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Muxes8pra1_UM_t_exp[30] = Muxes8pra1_UM_t_expected_prev[30];
	end
	if (
		( Muxes8pra1_UM_t_expected_prev[31] !== 1'bx ) && ( Muxes8pra1_UM_t_prev[31] !== Muxes8pra1_UM_t_expected_prev[31] )
		&& ((Muxes8pra1_UM_t_expected_prev[31] !== last_Muxes8pra1_UM_t_exp[31]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Muxes8pra1_UM_t[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Muxes8pra1_UM_t_expected_prev);
		$display ("     Real value = %b", Muxes8pra1_UM_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Muxes8pra1_UM_t_exp[31] = Muxes8pra1_UM_t_expected_prev[31];
	end
	if (
		( N_expected_prev !== 1'bx ) && ( N_prev !== N_expected_prev )
		&& ((N_expected_prev !== last_N_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_N_exp = N_expected_prev;
	end
	if (
		( ov_expected_prev !== 1'bx ) && ( ov_prev !== ov_expected_prev )
		&& ((ov_expected_prev !== last_ov_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ov :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ov_expected_prev);
		$display ("     Real value = %b", ov_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_ov_exp = ov_expected_prev;
	end
	if (
		( r0_expected_prev[0] !== 1'bx ) && ( r0_prev[0] !== r0_expected_prev[0] )
		&& ((r0_expected_prev[0] !== last_r0_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r0_expected_prev);
		$display ("     Real value = %b", r0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r0_exp[0] = r0_expected_prev[0];
	end
	if (
		( r0_expected_prev[1] !== 1'bx ) && ( r0_prev[1] !== r0_expected_prev[1] )
		&& ((r0_expected_prev[1] !== last_r0_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r0_expected_prev);
		$display ("     Real value = %b", r0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r0_exp[1] = r0_expected_prev[1];
	end
	if (
		( r0_expected_prev[2] !== 1'bx ) && ( r0_prev[2] !== r0_expected_prev[2] )
		&& ((r0_expected_prev[2] !== last_r0_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r0_expected_prev);
		$display ("     Real value = %b", r0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r0_exp[2] = r0_expected_prev[2];
	end
	if (
		( r0_expected_prev[3] !== 1'bx ) && ( r0_prev[3] !== r0_expected_prev[3] )
		&& ((r0_expected_prev[3] !== last_r0_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r0_expected_prev);
		$display ("     Real value = %b", r0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r0_exp[3] = r0_expected_prev[3];
	end
	if (
		( r0_expected_prev[4] !== 1'bx ) && ( r0_prev[4] !== r0_expected_prev[4] )
		&& ((r0_expected_prev[4] !== last_r0_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r0_expected_prev);
		$display ("     Real value = %b", r0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r0_exp[4] = r0_expected_prev[4];
	end
	if (
		( r0_expected_prev[5] !== 1'bx ) && ( r0_prev[5] !== r0_expected_prev[5] )
		&& ((r0_expected_prev[5] !== last_r0_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r0_expected_prev);
		$display ("     Real value = %b", r0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r0_exp[5] = r0_expected_prev[5];
	end
	if (
		( r0_expected_prev[6] !== 1'bx ) && ( r0_prev[6] !== r0_expected_prev[6] )
		&& ((r0_expected_prev[6] !== last_r0_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r0_expected_prev);
		$display ("     Real value = %b", r0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r0_exp[6] = r0_expected_prev[6];
	end
	if (
		( r0_expected_prev[7] !== 1'bx ) && ( r0_prev[7] !== r0_expected_prev[7] )
		&& ((r0_expected_prev[7] !== last_r0_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r0_expected_prev);
		$display ("     Real value = %b", r0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r0_exp[7] = r0_expected_prev[7];
	end
	if (
		( r0_expected_prev[8] !== 1'bx ) && ( r0_prev[8] !== r0_expected_prev[8] )
		&& ((r0_expected_prev[8] !== last_r0_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r0[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r0_expected_prev);
		$display ("     Real value = %b", r0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r0_exp[8] = r0_expected_prev[8];
	end
	if (
		( r0_expected_prev[9] !== 1'bx ) && ( r0_prev[9] !== r0_expected_prev[9] )
		&& ((r0_expected_prev[9] !== last_r0_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r0[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r0_expected_prev);
		$display ("     Real value = %b", r0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r0_exp[9] = r0_expected_prev[9];
	end
	if (
		( r0_expected_prev[10] !== 1'bx ) && ( r0_prev[10] !== r0_expected_prev[10] )
		&& ((r0_expected_prev[10] !== last_r0_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r0[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r0_expected_prev);
		$display ("     Real value = %b", r0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r0_exp[10] = r0_expected_prev[10];
	end
	if (
		( r0_expected_prev[11] !== 1'bx ) && ( r0_prev[11] !== r0_expected_prev[11] )
		&& ((r0_expected_prev[11] !== last_r0_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r0[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r0_expected_prev);
		$display ("     Real value = %b", r0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r0_exp[11] = r0_expected_prev[11];
	end
	if (
		( r0_expected_prev[12] !== 1'bx ) && ( r0_prev[12] !== r0_expected_prev[12] )
		&& ((r0_expected_prev[12] !== last_r0_exp[12]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r0[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r0_expected_prev);
		$display ("     Real value = %b", r0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r0_exp[12] = r0_expected_prev[12];
	end
	if (
		( r0_expected_prev[13] !== 1'bx ) && ( r0_prev[13] !== r0_expected_prev[13] )
		&& ((r0_expected_prev[13] !== last_r0_exp[13]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r0[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r0_expected_prev);
		$display ("     Real value = %b", r0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r0_exp[13] = r0_expected_prev[13];
	end
	if (
		( r0_expected_prev[14] !== 1'bx ) && ( r0_prev[14] !== r0_expected_prev[14] )
		&& ((r0_expected_prev[14] !== last_r0_exp[14]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r0[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r0_expected_prev);
		$display ("     Real value = %b", r0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r0_exp[14] = r0_expected_prev[14];
	end
	if (
		( r0_expected_prev[15] !== 1'bx ) && ( r0_prev[15] !== r0_expected_prev[15] )
		&& ((r0_expected_prev[15] !== last_r0_exp[15]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r0[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r0_expected_prev);
		$display ("     Real value = %b", r0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r0_exp[15] = r0_expected_prev[15];
	end
	if (
		( r0_expected_prev[16] !== 1'bx ) && ( r0_prev[16] !== r0_expected_prev[16] )
		&& ((r0_expected_prev[16] !== last_r0_exp[16]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r0[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r0_expected_prev);
		$display ("     Real value = %b", r0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r0_exp[16] = r0_expected_prev[16];
	end
	if (
		( r0_expected_prev[17] !== 1'bx ) && ( r0_prev[17] !== r0_expected_prev[17] )
		&& ((r0_expected_prev[17] !== last_r0_exp[17]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r0[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r0_expected_prev);
		$display ("     Real value = %b", r0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r0_exp[17] = r0_expected_prev[17];
	end
	if (
		( r0_expected_prev[18] !== 1'bx ) && ( r0_prev[18] !== r0_expected_prev[18] )
		&& ((r0_expected_prev[18] !== last_r0_exp[18]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r0[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r0_expected_prev);
		$display ("     Real value = %b", r0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r0_exp[18] = r0_expected_prev[18];
	end
	if (
		( r0_expected_prev[19] !== 1'bx ) && ( r0_prev[19] !== r0_expected_prev[19] )
		&& ((r0_expected_prev[19] !== last_r0_exp[19]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r0[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r0_expected_prev);
		$display ("     Real value = %b", r0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r0_exp[19] = r0_expected_prev[19];
	end
	if (
		( r0_expected_prev[20] !== 1'bx ) && ( r0_prev[20] !== r0_expected_prev[20] )
		&& ((r0_expected_prev[20] !== last_r0_exp[20]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r0[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r0_expected_prev);
		$display ("     Real value = %b", r0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r0_exp[20] = r0_expected_prev[20];
	end
	if (
		( r0_expected_prev[21] !== 1'bx ) && ( r0_prev[21] !== r0_expected_prev[21] )
		&& ((r0_expected_prev[21] !== last_r0_exp[21]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r0[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r0_expected_prev);
		$display ("     Real value = %b", r0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r0_exp[21] = r0_expected_prev[21];
	end
	if (
		( r0_expected_prev[22] !== 1'bx ) && ( r0_prev[22] !== r0_expected_prev[22] )
		&& ((r0_expected_prev[22] !== last_r0_exp[22]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r0[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r0_expected_prev);
		$display ("     Real value = %b", r0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r0_exp[22] = r0_expected_prev[22];
	end
	if (
		( r0_expected_prev[23] !== 1'bx ) && ( r0_prev[23] !== r0_expected_prev[23] )
		&& ((r0_expected_prev[23] !== last_r0_exp[23]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r0[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r0_expected_prev);
		$display ("     Real value = %b", r0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r0_exp[23] = r0_expected_prev[23];
	end
	if (
		( r0_expected_prev[24] !== 1'bx ) && ( r0_prev[24] !== r0_expected_prev[24] )
		&& ((r0_expected_prev[24] !== last_r0_exp[24]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r0[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r0_expected_prev);
		$display ("     Real value = %b", r0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r0_exp[24] = r0_expected_prev[24];
	end
	if (
		( r0_expected_prev[25] !== 1'bx ) && ( r0_prev[25] !== r0_expected_prev[25] )
		&& ((r0_expected_prev[25] !== last_r0_exp[25]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r0[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r0_expected_prev);
		$display ("     Real value = %b", r0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r0_exp[25] = r0_expected_prev[25];
	end
	if (
		( r0_expected_prev[26] !== 1'bx ) && ( r0_prev[26] !== r0_expected_prev[26] )
		&& ((r0_expected_prev[26] !== last_r0_exp[26]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r0[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r0_expected_prev);
		$display ("     Real value = %b", r0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r0_exp[26] = r0_expected_prev[26];
	end
	if (
		( r0_expected_prev[27] !== 1'bx ) && ( r0_prev[27] !== r0_expected_prev[27] )
		&& ((r0_expected_prev[27] !== last_r0_exp[27]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r0[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r0_expected_prev);
		$display ("     Real value = %b", r0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r0_exp[27] = r0_expected_prev[27];
	end
	if (
		( r0_expected_prev[28] !== 1'bx ) && ( r0_prev[28] !== r0_expected_prev[28] )
		&& ((r0_expected_prev[28] !== last_r0_exp[28]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r0[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r0_expected_prev);
		$display ("     Real value = %b", r0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r0_exp[28] = r0_expected_prev[28];
	end
	if (
		( r0_expected_prev[29] !== 1'bx ) && ( r0_prev[29] !== r0_expected_prev[29] )
		&& ((r0_expected_prev[29] !== last_r0_exp[29]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r0[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r0_expected_prev);
		$display ("     Real value = %b", r0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r0_exp[29] = r0_expected_prev[29];
	end
	if (
		( r0_expected_prev[30] !== 1'bx ) && ( r0_prev[30] !== r0_expected_prev[30] )
		&& ((r0_expected_prev[30] !== last_r0_exp[30]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r0[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r0_expected_prev);
		$display ("     Real value = %b", r0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r0_exp[30] = r0_expected_prev[30];
	end
	if (
		( r0_expected_prev[31] !== 1'bx ) && ( r0_prev[31] !== r0_expected_prev[31] )
		&& ((r0_expected_prev[31] !== last_r0_exp[31]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r0[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r0_expected_prev);
		$display ("     Real value = %b", r0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r0_exp[31] = r0_expected_prev[31];
	end
	if (
		( r1_expected_prev[0] !== 1'bx ) && ( r1_prev[0] !== r1_expected_prev[0] )
		&& ((r1_expected_prev[0] !== last_r1_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r1_exp[0] = r1_expected_prev[0];
	end
	if (
		( r1_expected_prev[1] !== 1'bx ) && ( r1_prev[1] !== r1_expected_prev[1] )
		&& ((r1_expected_prev[1] !== last_r1_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r1_exp[1] = r1_expected_prev[1];
	end
	if (
		( r1_expected_prev[2] !== 1'bx ) && ( r1_prev[2] !== r1_expected_prev[2] )
		&& ((r1_expected_prev[2] !== last_r1_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r1_exp[2] = r1_expected_prev[2];
	end
	if (
		( r1_expected_prev[3] !== 1'bx ) && ( r1_prev[3] !== r1_expected_prev[3] )
		&& ((r1_expected_prev[3] !== last_r1_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r1_exp[3] = r1_expected_prev[3];
	end
	if (
		( r1_expected_prev[4] !== 1'bx ) && ( r1_prev[4] !== r1_expected_prev[4] )
		&& ((r1_expected_prev[4] !== last_r1_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r1_exp[4] = r1_expected_prev[4];
	end
	if (
		( r1_expected_prev[5] !== 1'bx ) && ( r1_prev[5] !== r1_expected_prev[5] )
		&& ((r1_expected_prev[5] !== last_r1_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r1_exp[5] = r1_expected_prev[5];
	end
	if (
		( r1_expected_prev[6] !== 1'bx ) && ( r1_prev[6] !== r1_expected_prev[6] )
		&& ((r1_expected_prev[6] !== last_r1_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r1_exp[6] = r1_expected_prev[6];
	end
	if (
		( r1_expected_prev[7] !== 1'bx ) && ( r1_prev[7] !== r1_expected_prev[7] )
		&& ((r1_expected_prev[7] !== last_r1_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r1_exp[7] = r1_expected_prev[7];
	end
	if (
		( r1_expected_prev[8] !== 1'bx ) && ( r1_prev[8] !== r1_expected_prev[8] )
		&& ((r1_expected_prev[8] !== last_r1_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r1_exp[8] = r1_expected_prev[8];
	end
	if (
		( r1_expected_prev[9] !== 1'bx ) && ( r1_prev[9] !== r1_expected_prev[9] )
		&& ((r1_expected_prev[9] !== last_r1_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r1_exp[9] = r1_expected_prev[9];
	end
	if (
		( r1_expected_prev[10] !== 1'bx ) && ( r1_prev[10] !== r1_expected_prev[10] )
		&& ((r1_expected_prev[10] !== last_r1_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r1_exp[10] = r1_expected_prev[10];
	end
	if (
		( r1_expected_prev[11] !== 1'bx ) && ( r1_prev[11] !== r1_expected_prev[11] )
		&& ((r1_expected_prev[11] !== last_r1_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r1_exp[11] = r1_expected_prev[11];
	end
	if (
		( r1_expected_prev[12] !== 1'bx ) && ( r1_prev[12] !== r1_expected_prev[12] )
		&& ((r1_expected_prev[12] !== last_r1_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r1_exp[12] = r1_expected_prev[12];
	end
	if (
		( r1_expected_prev[13] !== 1'bx ) && ( r1_prev[13] !== r1_expected_prev[13] )
		&& ((r1_expected_prev[13] !== last_r1_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r1_exp[13] = r1_expected_prev[13];
	end
	if (
		( r1_expected_prev[14] !== 1'bx ) && ( r1_prev[14] !== r1_expected_prev[14] )
		&& ((r1_expected_prev[14] !== last_r1_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r1_exp[14] = r1_expected_prev[14];
	end
	if (
		( r1_expected_prev[15] !== 1'bx ) && ( r1_prev[15] !== r1_expected_prev[15] )
		&& ((r1_expected_prev[15] !== last_r1_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r1_exp[15] = r1_expected_prev[15];
	end
	if (
		( r1_expected_prev[16] !== 1'bx ) && ( r1_prev[16] !== r1_expected_prev[16] )
		&& ((r1_expected_prev[16] !== last_r1_exp[16]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r1_exp[16] = r1_expected_prev[16];
	end
	if (
		( r1_expected_prev[17] !== 1'bx ) && ( r1_prev[17] !== r1_expected_prev[17] )
		&& ((r1_expected_prev[17] !== last_r1_exp[17]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r1_exp[17] = r1_expected_prev[17];
	end
	if (
		( r1_expected_prev[18] !== 1'bx ) && ( r1_prev[18] !== r1_expected_prev[18] )
		&& ((r1_expected_prev[18] !== last_r1_exp[18]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r1_exp[18] = r1_expected_prev[18];
	end
	if (
		( r1_expected_prev[19] !== 1'bx ) && ( r1_prev[19] !== r1_expected_prev[19] )
		&& ((r1_expected_prev[19] !== last_r1_exp[19]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r1_exp[19] = r1_expected_prev[19];
	end
	if (
		( r1_expected_prev[20] !== 1'bx ) && ( r1_prev[20] !== r1_expected_prev[20] )
		&& ((r1_expected_prev[20] !== last_r1_exp[20]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r1_exp[20] = r1_expected_prev[20];
	end
	if (
		( r1_expected_prev[21] !== 1'bx ) && ( r1_prev[21] !== r1_expected_prev[21] )
		&& ((r1_expected_prev[21] !== last_r1_exp[21]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r1_exp[21] = r1_expected_prev[21];
	end
	if (
		( r1_expected_prev[22] !== 1'bx ) && ( r1_prev[22] !== r1_expected_prev[22] )
		&& ((r1_expected_prev[22] !== last_r1_exp[22]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r1_exp[22] = r1_expected_prev[22];
	end
	if (
		( r1_expected_prev[23] !== 1'bx ) && ( r1_prev[23] !== r1_expected_prev[23] )
		&& ((r1_expected_prev[23] !== last_r1_exp[23]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r1_exp[23] = r1_expected_prev[23];
	end
	if (
		( r1_expected_prev[24] !== 1'bx ) && ( r1_prev[24] !== r1_expected_prev[24] )
		&& ((r1_expected_prev[24] !== last_r1_exp[24]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r1_exp[24] = r1_expected_prev[24];
	end
	if (
		( r1_expected_prev[25] !== 1'bx ) && ( r1_prev[25] !== r1_expected_prev[25] )
		&& ((r1_expected_prev[25] !== last_r1_exp[25]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r1_exp[25] = r1_expected_prev[25];
	end
	if (
		( r1_expected_prev[26] !== 1'bx ) && ( r1_prev[26] !== r1_expected_prev[26] )
		&& ((r1_expected_prev[26] !== last_r1_exp[26]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r1_exp[26] = r1_expected_prev[26];
	end
	if (
		( r1_expected_prev[27] !== 1'bx ) && ( r1_prev[27] !== r1_expected_prev[27] )
		&& ((r1_expected_prev[27] !== last_r1_exp[27]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r1_exp[27] = r1_expected_prev[27];
	end
	if (
		( r1_expected_prev[28] !== 1'bx ) && ( r1_prev[28] !== r1_expected_prev[28] )
		&& ((r1_expected_prev[28] !== last_r1_exp[28]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r1_exp[28] = r1_expected_prev[28];
	end
	if (
		( r1_expected_prev[29] !== 1'bx ) && ( r1_prev[29] !== r1_expected_prev[29] )
		&& ((r1_expected_prev[29] !== last_r1_exp[29]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r1_exp[29] = r1_expected_prev[29];
	end
	if (
		( r1_expected_prev[30] !== 1'bx ) && ( r1_prev[30] !== r1_expected_prev[30] )
		&& ((r1_expected_prev[30] !== last_r1_exp[30]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r1_exp[30] = r1_expected_prev[30];
	end
	if (
		( r1_expected_prev[31] !== 1'bx ) && ( r1_prev[31] !== r1_expected_prev[31] )
		&& ((r1_expected_prev[31] !== last_r1_exp[31]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r1_exp[31] = r1_expected_prev[31];
	end
	if (
		( r2_expected_prev[0] !== 1'bx ) && ( r2_prev[0] !== r2_expected_prev[0] )
		&& ((r2_expected_prev[0] !== last_r2_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r2_exp[0] = r2_expected_prev[0];
	end
	if (
		( r2_expected_prev[1] !== 1'bx ) && ( r2_prev[1] !== r2_expected_prev[1] )
		&& ((r2_expected_prev[1] !== last_r2_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r2_exp[1] = r2_expected_prev[1];
	end
	if (
		( r2_expected_prev[2] !== 1'bx ) && ( r2_prev[2] !== r2_expected_prev[2] )
		&& ((r2_expected_prev[2] !== last_r2_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r2_exp[2] = r2_expected_prev[2];
	end
	if (
		( r2_expected_prev[3] !== 1'bx ) && ( r2_prev[3] !== r2_expected_prev[3] )
		&& ((r2_expected_prev[3] !== last_r2_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r2_exp[3] = r2_expected_prev[3];
	end
	if (
		( r2_expected_prev[4] !== 1'bx ) && ( r2_prev[4] !== r2_expected_prev[4] )
		&& ((r2_expected_prev[4] !== last_r2_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r2_exp[4] = r2_expected_prev[4];
	end
	if (
		( r2_expected_prev[5] !== 1'bx ) && ( r2_prev[5] !== r2_expected_prev[5] )
		&& ((r2_expected_prev[5] !== last_r2_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r2_exp[5] = r2_expected_prev[5];
	end
	if (
		( r2_expected_prev[6] !== 1'bx ) && ( r2_prev[6] !== r2_expected_prev[6] )
		&& ((r2_expected_prev[6] !== last_r2_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r2_exp[6] = r2_expected_prev[6];
	end
	if (
		( r2_expected_prev[7] !== 1'bx ) && ( r2_prev[7] !== r2_expected_prev[7] )
		&& ((r2_expected_prev[7] !== last_r2_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r2_exp[7] = r2_expected_prev[7];
	end
	if (
		( r2_expected_prev[8] !== 1'bx ) && ( r2_prev[8] !== r2_expected_prev[8] )
		&& ((r2_expected_prev[8] !== last_r2_exp[8]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r2_exp[8] = r2_expected_prev[8];
	end
	if (
		( r2_expected_prev[9] !== 1'bx ) && ( r2_prev[9] !== r2_expected_prev[9] )
		&& ((r2_expected_prev[9] !== last_r2_exp[9]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r2_exp[9] = r2_expected_prev[9];
	end
	if (
		( r2_expected_prev[10] !== 1'bx ) && ( r2_prev[10] !== r2_expected_prev[10] )
		&& ((r2_expected_prev[10] !== last_r2_exp[10]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r2_exp[10] = r2_expected_prev[10];
	end
	if (
		( r2_expected_prev[11] !== 1'bx ) && ( r2_prev[11] !== r2_expected_prev[11] )
		&& ((r2_expected_prev[11] !== last_r2_exp[11]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r2_exp[11] = r2_expected_prev[11];
	end
	if (
		( r2_expected_prev[12] !== 1'bx ) && ( r2_prev[12] !== r2_expected_prev[12] )
		&& ((r2_expected_prev[12] !== last_r2_exp[12]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r2_exp[12] = r2_expected_prev[12];
	end
	if (
		( r2_expected_prev[13] !== 1'bx ) && ( r2_prev[13] !== r2_expected_prev[13] )
		&& ((r2_expected_prev[13] !== last_r2_exp[13]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r2_exp[13] = r2_expected_prev[13];
	end
	if (
		( r2_expected_prev[14] !== 1'bx ) && ( r2_prev[14] !== r2_expected_prev[14] )
		&& ((r2_expected_prev[14] !== last_r2_exp[14]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r2_exp[14] = r2_expected_prev[14];
	end
	if (
		( r2_expected_prev[15] !== 1'bx ) && ( r2_prev[15] !== r2_expected_prev[15] )
		&& ((r2_expected_prev[15] !== last_r2_exp[15]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r2_exp[15] = r2_expected_prev[15];
	end
	if (
		( r2_expected_prev[16] !== 1'bx ) && ( r2_prev[16] !== r2_expected_prev[16] )
		&& ((r2_expected_prev[16] !== last_r2_exp[16]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r2_exp[16] = r2_expected_prev[16];
	end
	if (
		( r2_expected_prev[17] !== 1'bx ) && ( r2_prev[17] !== r2_expected_prev[17] )
		&& ((r2_expected_prev[17] !== last_r2_exp[17]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r2_exp[17] = r2_expected_prev[17];
	end
	if (
		( r2_expected_prev[18] !== 1'bx ) && ( r2_prev[18] !== r2_expected_prev[18] )
		&& ((r2_expected_prev[18] !== last_r2_exp[18]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r2_exp[18] = r2_expected_prev[18];
	end
	if (
		( r2_expected_prev[19] !== 1'bx ) && ( r2_prev[19] !== r2_expected_prev[19] )
		&& ((r2_expected_prev[19] !== last_r2_exp[19]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r2_exp[19] = r2_expected_prev[19];
	end
	if (
		( r2_expected_prev[20] !== 1'bx ) && ( r2_prev[20] !== r2_expected_prev[20] )
		&& ((r2_expected_prev[20] !== last_r2_exp[20]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r2_exp[20] = r2_expected_prev[20];
	end
	if (
		( r2_expected_prev[21] !== 1'bx ) && ( r2_prev[21] !== r2_expected_prev[21] )
		&& ((r2_expected_prev[21] !== last_r2_exp[21]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r2_exp[21] = r2_expected_prev[21];
	end
	if (
		( r2_expected_prev[22] !== 1'bx ) && ( r2_prev[22] !== r2_expected_prev[22] )
		&& ((r2_expected_prev[22] !== last_r2_exp[22]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r2_exp[22] = r2_expected_prev[22];
	end
	if (
		( r2_expected_prev[23] !== 1'bx ) && ( r2_prev[23] !== r2_expected_prev[23] )
		&& ((r2_expected_prev[23] !== last_r2_exp[23]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r2_exp[23] = r2_expected_prev[23];
	end
	if (
		( r2_expected_prev[24] !== 1'bx ) && ( r2_prev[24] !== r2_expected_prev[24] )
		&& ((r2_expected_prev[24] !== last_r2_exp[24]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r2_exp[24] = r2_expected_prev[24];
	end
	if (
		( r2_expected_prev[25] !== 1'bx ) && ( r2_prev[25] !== r2_expected_prev[25] )
		&& ((r2_expected_prev[25] !== last_r2_exp[25]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r2_exp[25] = r2_expected_prev[25];
	end
	if (
		( r2_expected_prev[26] !== 1'bx ) && ( r2_prev[26] !== r2_expected_prev[26] )
		&& ((r2_expected_prev[26] !== last_r2_exp[26]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r2_exp[26] = r2_expected_prev[26];
	end
	if (
		( r2_expected_prev[27] !== 1'bx ) && ( r2_prev[27] !== r2_expected_prev[27] )
		&& ((r2_expected_prev[27] !== last_r2_exp[27]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r2_exp[27] = r2_expected_prev[27];
	end
	if (
		( r2_expected_prev[28] !== 1'bx ) && ( r2_prev[28] !== r2_expected_prev[28] )
		&& ((r2_expected_prev[28] !== last_r2_exp[28]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r2_exp[28] = r2_expected_prev[28];
	end
	if (
		( r2_expected_prev[29] !== 1'bx ) && ( r2_prev[29] !== r2_expected_prev[29] )
		&& ((r2_expected_prev[29] !== last_r2_exp[29]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r2_exp[29] = r2_expected_prev[29];
	end
	if (
		( r2_expected_prev[30] !== 1'bx ) && ( r2_prev[30] !== r2_expected_prev[30] )
		&& ((r2_expected_prev[30] !== last_r2_exp[30]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r2_exp[30] = r2_expected_prev[30];
	end
	if (
		( r2_expected_prev[31] !== 1'bx ) && ( r2_prev[31] !== r2_expected_prev[31] )
		&& ((r2_expected_prev[31] !== last_r2_exp[31]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r2_exp[31] = r2_expected_prev[31];
	end
	if (
		( ULA1_t_expected_prev[0] !== 1'bx ) && ( ULA1_t_prev[0] !== ULA1_t_expected_prev[0] )
		&& ((ULA1_t_expected_prev[0] !== last_ULA1_t_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA1_t[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA1_t_expected_prev);
		$display ("     Real value = %b", ULA1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ULA1_t_exp[0] = ULA1_t_expected_prev[0];
	end
	if (
		( ULA1_t_expected_prev[1] !== 1'bx ) && ( ULA1_t_prev[1] !== ULA1_t_expected_prev[1] )
		&& ((ULA1_t_expected_prev[1] !== last_ULA1_t_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA1_t[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA1_t_expected_prev);
		$display ("     Real value = %b", ULA1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ULA1_t_exp[1] = ULA1_t_expected_prev[1];
	end
	if (
		( ULA1_t_expected_prev[2] !== 1'bx ) && ( ULA1_t_prev[2] !== ULA1_t_expected_prev[2] )
		&& ((ULA1_t_expected_prev[2] !== last_ULA1_t_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA1_t[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA1_t_expected_prev);
		$display ("     Real value = %b", ULA1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ULA1_t_exp[2] = ULA1_t_expected_prev[2];
	end
	if (
		( ULA1_t_expected_prev[3] !== 1'bx ) && ( ULA1_t_prev[3] !== ULA1_t_expected_prev[3] )
		&& ((ULA1_t_expected_prev[3] !== last_ULA1_t_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA1_t[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA1_t_expected_prev);
		$display ("     Real value = %b", ULA1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ULA1_t_exp[3] = ULA1_t_expected_prev[3];
	end
	if (
		( ULA1_t_expected_prev[4] !== 1'bx ) && ( ULA1_t_prev[4] !== ULA1_t_expected_prev[4] )
		&& ((ULA1_t_expected_prev[4] !== last_ULA1_t_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA1_t[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA1_t_expected_prev);
		$display ("     Real value = %b", ULA1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ULA1_t_exp[4] = ULA1_t_expected_prev[4];
	end
	if (
		( ULA1_t_expected_prev[5] !== 1'bx ) && ( ULA1_t_prev[5] !== ULA1_t_expected_prev[5] )
		&& ((ULA1_t_expected_prev[5] !== last_ULA1_t_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA1_t[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA1_t_expected_prev);
		$display ("     Real value = %b", ULA1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ULA1_t_exp[5] = ULA1_t_expected_prev[5];
	end
	if (
		( ULA1_t_expected_prev[6] !== 1'bx ) && ( ULA1_t_prev[6] !== ULA1_t_expected_prev[6] )
		&& ((ULA1_t_expected_prev[6] !== last_ULA1_t_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA1_t[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA1_t_expected_prev);
		$display ("     Real value = %b", ULA1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ULA1_t_exp[6] = ULA1_t_expected_prev[6];
	end
	if (
		( ULA1_t_expected_prev[7] !== 1'bx ) && ( ULA1_t_prev[7] !== ULA1_t_expected_prev[7] )
		&& ((ULA1_t_expected_prev[7] !== last_ULA1_t_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA1_t[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA1_t_expected_prev);
		$display ("     Real value = %b", ULA1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ULA1_t_exp[7] = ULA1_t_expected_prev[7];
	end
	if (
		( ULA1_t_expected_prev[8] !== 1'bx ) && ( ULA1_t_prev[8] !== ULA1_t_expected_prev[8] )
		&& ((ULA1_t_expected_prev[8] !== last_ULA1_t_exp[8]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA1_t[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA1_t_expected_prev);
		$display ("     Real value = %b", ULA1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ULA1_t_exp[8] = ULA1_t_expected_prev[8];
	end
	if (
		( ULA1_t_expected_prev[9] !== 1'bx ) && ( ULA1_t_prev[9] !== ULA1_t_expected_prev[9] )
		&& ((ULA1_t_expected_prev[9] !== last_ULA1_t_exp[9]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA1_t[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA1_t_expected_prev);
		$display ("     Real value = %b", ULA1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ULA1_t_exp[9] = ULA1_t_expected_prev[9];
	end
	if (
		( ULA1_t_expected_prev[10] !== 1'bx ) && ( ULA1_t_prev[10] !== ULA1_t_expected_prev[10] )
		&& ((ULA1_t_expected_prev[10] !== last_ULA1_t_exp[10]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA1_t[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA1_t_expected_prev);
		$display ("     Real value = %b", ULA1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ULA1_t_exp[10] = ULA1_t_expected_prev[10];
	end
	if (
		( ULA1_t_expected_prev[11] !== 1'bx ) && ( ULA1_t_prev[11] !== ULA1_t_expected_prev[11] )
		&& ((ULA1_t_expected_prev[11] !== last_ULA1_t_exp[11]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA1_t[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA1_t_expected_prev);
		$display ("     Real value = %b", ULA1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ULA1_t_exp[11] = ULA1_t_expected_prev[11];
	end
	if (
		( ULA1_t_expected_prev[12] !== 1'bx ) && ( ULA1_t_prev[12] !== ULA1_t_expected_prev[12] )
		&& ((ULA1_t_expected_prev[12] !== last_ULA1_t_exp[12]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA1_t[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA1_t_expected_prev);
		$display ("     Real value = %b", ULA1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ULA1_t_exp[12] = ULA1_t_expected_prev[12];
	end
	if (
		( ULA1_t_expected_prev[13] !== 1'bx ) && ( ULA1_t_prev[13] !== ULA1_t_expected_prev[13] )
		&& ((ULA1_t_expected_prev[13] !== last_ULA1_t_exp[13]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA1_t[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA1_t_expected_prev);
		$display ("     Real value = %b", ULA1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ULA1_t_exp[13] = ULA1_t_expected_prev[13];
	end
	if (
		( ULA1_t_expected_prev[14] !== 1'bx ) && ( ULA1_t_prev[14] !== ULA1_t_expected_prev[14] )
		&& ((ULA1_t_expected_prev[14] !== last_ULA1_t_exp[14]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA1_t[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA1_t_expected_prev);
		$display ("     Real value = %b", ULA1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ULA1_t_exp[14] = ULA1_t_expected_prev[14];
	end
	if (
		( ULA1_t_expected_prev[15] !== 1'bx ) && ( ULA1_t_prev[15] !== ULA1_t_expected_prev[15] )
		&& ((ULA1_t_expected_prev[15] !== last_ULA1_t_exp[15]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA1_t[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA1_t_expected_prev);
		$display ("     Real value = %b", ULA1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ULA1_t_exp[15] = ULA1_t_expected_prev[15];
	end
	if (
		( ULA1_t_expected_prev[16] !== 1'bx ) && ( ULA1_t_prev[16] !== ULA1_t_expected_prev[16] )
		&& ((ULA1_t_expected_prev[16] !== last_ULA1_t_exp[16]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA1_t[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA1_t_expected_prev);
		$display ("     Real value = %b", ULA1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ULA1_t_exp[16] = ULA1_t_expected_prev[16];
	end
	if (
		( ULA1_t_expected_prev[17] !== 1'bx ) && ( ULA1_t_prev[17] !== ULA1_t_expected_prev[17] )
		&& ((ULA1_t_expected_prev[17] !== last_ULA1_t_exp[17]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA1_t[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA1_t_expected_prev);
		$display ("     Real value = %b", ULA1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ULA1_t_exp[17] = ULA1_t_expected_prev[17];
	end
	if (
		( ULA1_t_expected_prev[18] !== 1'bx ) && ( ULA1_t_prev[18] !== ULA1_t_expected_prev[18] )
		&& ((ULA1_t_expected_prev[18] !== last_ULA1_t_exp[18]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA1_t[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA1_t_expected_prev);
		$display ("     Real value = %b", ULA1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ULA1_t_exp[18] = ULA1_t_expected_prev[18];
	end
	if (
		( ULA1_t_expected_prev[19] !== 1'bx ) && ( ULA1_t_prev[19] !== ULA1_t_expected_prev[19] )
		&& ((ULA1_t_expected_prev[19] !== last_ULA1_t_exp[19]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA1_t[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA1_t_expected_prev);
		$display ("     Real value = %b", ULA1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ULA1_t_exp[19] = ULA1_t_expected_prev[19];
	end
	if (
		( ULA1_t_expected_prev[20] !== 1'bx ) && ( ULA1_t_prev[20] !== ULA1_t_expected_prev[20] )
		&& ((ULA1_t_expected_prev[20] !== last_ULA1_t_exp[20]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA1_t[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA1_t_expected_prev);
		$display ("     Real value = %b", ULA1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ULA1_t_exp[20] = ULA1_t_expected_prev[20];
	end
	if (
		( ULA1_t_expected_prev[21] !== 1'bx ) && ( ULA1_t_prev[21] !== ULA1_t_expected_prev[21] )
		&& ((ULA1_t_expected_prev[21] !== last_ULA1_t_exp[21]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA1_t[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA1_t_expected_prev);
		$display ("     Real value = %b", ULA1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ULA1_t_exp[21] = ULA1_t_expected_prev[21];
	end
	if (
		( ULA1_t_expected_prev[22] !== 1'bx ) && ( ULA1_t_prev[22] !== ULA1_t_expected_prev[22] )
		&& ((ULA1_t_expected_prev[22] !== last_ULA1_t_exp[22]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA1_t[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA1_t_expected_prev);
		$display ("     Real value = %b", ULA1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ULA1_t_exp[22] = ULA1_t_expected_prev[22];
	end
	if (
		( ULA1_t_expected_prev[23] !== 1'bx ) && ( ULA1_t_prev[23] !== ULA1_t_expected_prev[23] )
		&& ((ULA1_t_expected_prev[23] !== last_ULA1_t_exp[23]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA1_t[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA1_t_expected_prev);
		$display ("     Real value = %b", ULA1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ULA1_t_exp[23] = ULA1_t_expected_prev[23];
	end
	if (
		( ULA1_t_expected_prev[24] !== 1'bx ) && ( ULA1_t_prev[24] !== ULA1_t_expected_prev[24] )
		&& ((ULA1_t_expected_prev[24] !== last_ULA1_t_exp[24]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA1_t[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA1_t_expected_prev);
		$display ("     Real value = %b", ULA1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ULA1_t_exp[24] = ULA1_t_expected_prev[24];
	end
	if (
		( ULA1_t_expected_prev[25] !== 1'bx ) && ( ULA1_t_prev[25] !== ULA1_t_expected_prev[25] )
		&& ((ULA1_t_expected_prev[25] !== last_ULA1_t_exp[25]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA1_t[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA1_t_expected_prev);
		$display ("     Real value = %b", ULA1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ULA1_t_exp[25] = ULA1_t_expected_prev[25];
	end
	if (
		( ULA1_t_expected_prev[26] !== 1'bx ) && ( ULA1_t_prev[26] !== ULA1_t_expected_prev[26] )
		&& ((ULA1_t_expected_prev[26] !== last_ULA1_t_exp[26]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA1_t[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA1_t_expected_prev);
		$display ("     Real value = %b", ULA1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ULA1_t_exp[26] = ULA1_t_expected_prev[26];
	end
	if (
		( ULA1_t_expected_prev[27] !== 1'bx ) && ( ULA1_t_prev[27] !== ULA1_t_expected_prev[27] )
		&& ((ULA1_t_expected_prev[27] !== last_ULA1_t_exp[27]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA1_t[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA1_t_expected_prev);
		$display ("     Real value = %b", ULA1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ULA1_t_exp[27] = ULA1_t_expected_prev[27];
	end
	if (
		( ULA1_t_expected_prev[28] !== 1'bx ) && ( ULA1_t_prev[28] !== ULA1_t_expected_prev[28] )
		&& ((ULA1_t_expected_prev[28] !== last_ULA1_t_exp[28]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA1_t[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA1_t_expected_prev);
		$display ("     Real value = %b", ULA1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ULA1_t_exp[28] = ULA1_t_expected_prev[28];
	end
	if (
		( ULA1_t_expected_prev[29] !== 1'bx ) && ( ULA1_t_prev[29] !== ULA1_t_expected_prev[29] )
		&& ((ULA1_t_expected_prev[29] !== last_ULA1_t_exp[29]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA1_t[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA1_t_expected_prev);
		$display ("     Real value = %b", ULA1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ULA1_t_exp[29] = ULA1_t_expected_prev[29];
	end
	if (
		( ULA1_t_expected_prev[30] !== 1'bx ) && ( ULA1_t_prev[30] !== ULA1_t_expected_prev[30] )
		&& ((ULA1_t_expected_prev[30] !== last_ULA1_t_exp[30]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA1_t[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA1_t_expected_prev);
		$display ("     Real value = %b", ULA1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ULA1_t_exp[30] = ULA1_t_expected_prev[30];
	end
	if (
		( ULA1_t_expected_prev[31] !== 1'bx ) && ( ULA1_t_prev[31] !== ULA1_t_expected_prev[31] )
		&& ((ULA1_t_expected_prev[31] !== last_ULA1_t_exp[31]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA1_t[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA1_t_expected_prev);
		$display ("     Real value = %b", ULA1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ULA1_t_exp[31] = ULA1_t_expected_prev[31];
	end
	if (
		( ULA2_t_expected_prev[0] !== 1'bx ) && ( ULA2_t_prev[0] !== ULA2_t_expected_prev[0] )
		&& ((ULA2_t_expected_prev[0] !== last_ULA2_t_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA2_t[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA2_t_expected_prev);
		$display ("     Real value = %b", ULA2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ULA2_t_exp[0] = ULA2_t_expected_prev[0];
	end
	if (
		( ULA2_t_expected_prev[1] !== 1'bx ) && ( ULA2_t_prev[1] !== ULA2_t_expected_prev[1] )
		&& ((ULA2_t_expected_prev[1] !== last_ULA2_t_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA2_t[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA2_t_expected_prev);
		$display ("     Real value = %b", ULA2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ULA2_t_exp[1] = ULA2_t_expected_prev[1];
	end
	if (
		( ULA2_t_expected_prev[2] !== 1'bx ) && ( ULA2_t_prev[2] !== ULA2_t_expected_prev[2] )
		&& ((ULA2_t_expected_prev[2] !== last_ULA2_t_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA2_t[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA2_t_expected_prev);
		$display ("     Real value = %b", ULA2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ULA2_t_exp[2] = ULA2_t_expected_prev[2];
	end
	if (
		( ULA2_t_expected_prev[3] !== 1'bx ) && ( ULA2_t_prev[3] !== ULA2_t_expected_prev[3] )
		&& ((ULA2_t_expected_prev[3] !== last_ULA2_t_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA2_t[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA2_t_expected_prev);
		$display ("     Real value = %b", ULA2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ULA2_t_exp[3] = ULA2_t_expected_prev[3];
	end
	if (
		( ULA2_t_expected_prev[4] !== 1'bx ) && ( ULA2_t_prev[4] !== ULA2_t_expected_prev[4] )
		&& ((ULA2_t_expected_prev[4] !== last_ULA2_t_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA2_t[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA2_t_expected_prev);
		$display ("     Real value = %b", ULA2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ULA2_t_exp[4] = ULA2_t_expected_prev[4];
	end
	if (
		( ULA2_t_expected_prev[5] !== 1'bx ) && ( ULA2_t_prev[5] !== ULA2_t_expected_prev[5] )
		&& ((ULA2_t_expected_prev[5] !== last_ULA2_t_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA2_t[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA2_t_expected_prev);
		$display ("     Real value = %b", ULA2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ULA2_t_exp[5] = ULA2_t_expected_prev[5];
	end
	if (
		( ULA2_t_expected_prev[6] !== 1'bx ) && ( ULA2_t_prev[6] !== ULA2_t_expected_prev[6] )
		&& ((ULA2_t_expected_prev[6] !== last_ULA2_t_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA2_t[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA2_t_expected_prev);
		$display ("     Real value = %b", ULA2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ULA2_t_exp[6] = ULA2_t_expected_prev[6];
	end
	if (
		( ULA2_t_expected_prev[7] !== 1'bx ) && ( ULA2_t_prev[7] !== ULA2_t_expected_prev[7] )
		&& ((ULA2_t_expected_prev[7] !== last_ULA2_t_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA2_t[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA2_t_expected_prev);
		$display ("     Real value = %b", ULA2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ULA2_t_exp[7] = ULA2_t_expected_prev[7];
	end
	if (
		( ULA2_t_expected_prev[8] !== 1'bx ) && ( ULA2_t_prev[8] !== ULA2_t_expected_prev[8] )
		&& ((ULA2_t_expected_prev[8] !== last_ULA2_t_exp[8]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA2_t[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA2_t_expected_prev);
		$display ("     Real value = %b", ULA2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ULA2_t_exp[8] = ULA2_t_expected_prev[8];
	end
	if (
		( ULA2_t_expected_prev[9] !== 1'bx ) && ( ULA2_t_prev[9] !== ULA2_t_expected_prev[9] )
		&& ((ULA2_t_expected_prev[9] !== last_ULA2_t_exp[9]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA2_t[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA2_t_expected_prev);
		$display ("     Real value = %b", ULA2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ULA2_t_exp[9] = ULA2_t_expected_prev[9];
	end
	if (
		( ULA2_t_expected_prev[10] !== 1'bx ) && ( ULA2_t_prev[10] !== ULA2_t_expected_prev[10] )
		&& ((ULA2_t_expected_prev[10] !== last_ULA2_t_exp[10]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA2_t[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA2_t_expected_prev);
		$display ("     Real value = %b", ULA2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ULA2_t_exp[10] = ULA2_t_expected_prev[10];
	end
	if (
		( ULA2_t_expected_prev[11] !== 1'bx ) && ( ULA2_t_prev[11] !== ULA2_t_expected_prev[11] )
		&& ((ULA2_t_expected_prev[11] !== last_ULA2_t_exp[11]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA2_t[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA2_t_expected_prev);
		$display ("     Real value = %b", ULA2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ULA2_t_exp[11] = ULA2_t_expected_prev[11];
	end
	if (
		( ULA2_t_expected_prev[12] !== 1'bx ) && ( ULA2_t_prev[12] !== ULA2_t_expected_prev[12] )
		&& ((ULA2_t_expected_prev[12] !== last_ULA2_t_exp[12]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA2_t[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA2_t_expected_prev);
		$display ("     Real value = %b", ULA2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ULA2_t_exp[12] = ULA2_t_expected_prev[12];
	end
	if (
		( ULA2_t_expected_prev[13] !== 1'bx ) && ( ULA2_t_prev[13] !== ULA2_t_expected_prev[13] )
		&& ((ULA2_t_expected_prev[13] !== last_ULA2_t_exp[13]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA2_t[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA2_t_expected_prev);
		$display ("     Real value = %b", ULA2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ULA2_t_exp[13] = ULA2_t_expected_prev[13];
	end
	if (
		( ULA2_t_expected_prev[14] !== 1'bx ) && ( ULA2_t_prev[14] !== ULA2_t_expected_prev[14] )
		&& ((ULA2_t_expected_prev[14] !== last_ULA2_t_exp[14]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA2_t[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA2_t_expected_prev);
		$display ("     Real value = %b", ULA2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ULA2_t_exp[14] = ULA2_t_expected_prev[14];
	end
	if (
		( ULA2_t_expected_prev[15] !== 1'bx ) && ( ULA2_t_prev[15] !== ULA2_t_expected_prev[15] )
		&& ((ULA2_t_expected_prev[15] !== last_ULA2_t_exp[15]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA2_t[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA2_t_expected_prev);
		$display ("     Real value = %b", ULA2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ULA2_t_exp[15] = ULA2_t_expected_prev[15];
	end
	if (
		( ULA2_t_expected_prev[16] !== 1'bx ) && ( ULA2_t_prev[16] !== ULA2_t_expected_prev[16] )
		&& ((ULA2_t_expected_prev[16] !== last_ULA2_t_exp[16]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA2_t[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA2_t_expected_prev);
		$display ("     Real value = %b", ULA2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ULA2_t_exp[16] = ULA2_t_expected_prev[16];
	end
	if (
		( ULA2_t_expected_prev[17] !== 1'bx ) && ( ULA2_t_prev[17] !== ULA2_t_expected_prev[17] )
		&& ((ULA2_t_expected_prev[17] !== last_ULA2_t_exp[17]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA2_t[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA2_t_expected_prev);
		$display ("     Real value = %b", ULA2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ULA2_t_exp[17] = ULA2_t_expected_prev[17];
	end
	if (
		( ULA2_t_expected_prev[18] !== 1'bx ) && ( ULA2_t_prev[18] !== ULA2_t_expected_prev[18] )
		&& ((ULA2_t_expected_prev[18] !== last_ULA2_t_exp[18]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA2_t[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA2_t_expected_prev);
		$display ("     Real value = %b", ULA2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ULA2_t_exp[18] = ULA2_t_expected_prev[18];
	end
	if (
		( ULA2_t_expected_prev[19] !== 1'bx ) && ( ULA2_t_prev[19] !== ULA2_t_expected_prev[19] )
		&& ((ULA2_t_expected_prev[19] !== last_ULA2_t_exp[19]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA2_t[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA2_t_expected_prev);
		$display ("     Real value = %b", ULA2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ULA2_t_exp[19] = ULA2_t_expected_prev[19];
	end
	if (
		( ULA2_t_expected_prev[20] !== 1'bx ) && ( ULA2_t_prev[20] !== ULA2_t_expected_prev[20] )
		&& ((ULA2_t_expected_prev[20] !== last_ULA2_t_exp[20]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA2_t[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA2_t_expected_prev);
		$display ("     Real value = %b", ULA2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ULA2_t_exp[20] = ULA2_t_expected_prev[20];
	end
	if (
		( ULA2_t_expected_prev[21] !== 1'bx ) && ( ULA2_t_prev[21] !== ULA2_t_expected_prev[21] )
		&& ((ULA2_t_expected_prev[21] !== last_ULA2_t_exp[21]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA2_t[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA2_t_expected_prev);
		$display ("     Real value = %b", ULA2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ULA2_t_exp[21] = ULA2_t_expected_prev[21];
	end
	if (
		( ULA2_t_expected_prev[22] !== 1'bx ) && ( ULA2_t_prev[22] !== ULA2_t_expected_prev[22] )
		&& ((ULA2_t_expected_prev[22] !== last_ULA2_t_exp[22]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA2_t[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA2_t_expected_prev);
		$display ("     Real value = %b", ULA2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ULA2_t_exp[22] = ULA2_t_expected_prev[22];
	end
	if (
		( ULA2_t_expected_prev[23] !== 1'bx ) && ( ULA2_t_prev[23] !== ULA2_t_expected_prev[23] )
		&& ((ULA2_t_expected_prev[23] !== last_ULA2_t_exp[23]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA2_t[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA2_t_expected_prev);
		$display ("     Real value = %b", ULA2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ULA2_t_exp[23] = ULA2_t_expected_prev[23];
	end
	if (
		( ULA2_t_expected_prev[24] !== 1'bx ) && ( ULA2_t_prev[24] !== ULA2_t_expected_prev[24] )
		&& ((ULA2_t_expected_prev[24] !== last_ULA2_t_exp[24]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA2_t[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA2_t_expected_prev);
		$display ("     Real value = %b", ULA2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ULA2_t_exp[24] = ULA2_t_expected_prev[24];
	end
	if (
		( ULA2_t_expected_prev[25] !== 1'bx ) && ( ULA2_t_prev[25] !== ULA2_t_expected_prev[25] )
		&& ((ULA2_t_expected_prev[25] !== last_ULA2_t_exp[25]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA2_t[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA2_t_expected_prev);
		$display ("     Real value = %b", ULA2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ULA2_t_exp[25] = ULA2_t_expected_prev[25];
	end
	if (
		( ULA2_t_expected_prev[26] !== 1'bx ) && ( ULA2_t_prev[26] !== ULA2_t_expected_prev[26] )
		&& ((ULA2_t_expected_prev[26] !== last_ULA2_t_exp[26]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA2_t[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA2_t_expected_prev);
		$display ("     Real value = %b", ULA2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ULA2_t_exp[26] = ULA2_t_expected_prev[26];
	end
	if (
		( ULA2_t_expected_prev[27] !== 1'bx ) && ( ULA2_t_prev[27] !== ULA2_t_expected_prev[27] )
		&& ((ULA2_t_expected_prev[27] !== last_ULA2_t_exp[27]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA2_t[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA2_t_expected_prev);
		$display ("     Real value = %b", ULA2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ULA2_t_exp[27] = ULA2_t_expected_prev[27];
	end
	if (
		( ULA2_t_expected_prev[28] !== 1'bx ) && ( ULA2_t_prev[28] !== ULA2_t_expected_prev[28] )
		&& ((ULA2_t_expected_prev[28] !== last_ULA2_t_exp[28]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA2_t[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA2_t_expected_prev);
		$display ("     Real value = %b", ULA2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ULA2_t_exp[28] = ULA2_t_expected_prev[28];
	end
	if (
		( ULA2_t_expected_prev[29] !== 1'bx ) && ( ULA2_t_prev[29] !== ULA2_t_expected_prev[29] )
		&& ((ULA2_t_expected_prev[29] !== last_ULA2_t_exp[29]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA2_t[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA2_t_expected_prev);
		$display ("     Real value = %b", ULA2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ULA2_t_exp[29] = ULA2_t_expected_prev[29];
	end
	if (
		( ULA2_t_expected_prev[30] !== 1'bx ) && ( ULA2_t_prev[30] !== ULA2_t_expected_prev[30] )
		&& ((ULA2_t_expected_prev[30] !== last_ULA2_t_exp[30]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA2_t[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA2_t_expected_prev);
		$display ("     Real value = %b", ULA2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ULA2_t_exp[30] = ULA2_t_expected_prev[30];
	end
	if (
		( ULA2_t_expected_prev[31] !== 1'bx ) && ( ULA2_t_prev[31] !== ULA2_t_expected_prev[31] )
		&& ((ULA2_t_expected_prev[31] !== last_ULA2_t_exp[31]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA2_t[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA2_t_expected_prev);
		$display ("     Real value = %b", ULA2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ULA2_t_exp[31] = ULA2_t_expected_prev[31];
	end
	if (
		( Z_expected_prev !== 1'bx ) && ( Z_prev !== Z_expected_prev )
		&& ((Z_expected_prev !== last_Z_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Z_exp = Z_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module DataPath_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [28:0] c;
reg clock;
reg [0:31] data_in;
reg reset;
// wires                                               
wire cout;
wire [0:31] data_out;
wire [0:31] Muxes8pra1_DOIS_t;
wire [0:31] Muxes8pra1_TRES_t;
wire [0:31] Muxes8pra1_UM_t;
wire N;
wire ov;
wire [0:31] r0;
wire [0:31] r1;
wire [0:31] r2;
wire [0:31] ULA1_t;
wire [0:31] ULA2_t;
wire Z;

wire sampler;                             

// assign statements (if any)                          
DataPath i1 (
// port map - connection between master ports and signals/registers   
	.c(c),
	.clock(clock),
	.cout(cout),
	.data_in(data_in),
	.data_out(data_out),
	.Muxes8pra1_DOIS_t(Muxes8pra1_DOIS_t),
	.Muxes8pra1_TRES_t(Muxes8pra1_TRES_t),
	.Muxes8pra1_UM_t(Muxes8pra1_UM_t),
	.N(N),
	.ov(ov),
	.r0(r0),
	.r1(r1),
	.r2(r2),
	.reset(reset),
	.ULA1_t(ULA1_t),
	.ULA2_t(ULA2_t),
	.Z(Z)
);
// c[ 28 ]
initial
begin
	c[28] = 1'b0;
end 
// c[ 27 ]
initial
begin
	c[27] = 1'b0;
end 
// c[ 26 ]
initial
begin
	c[26] = 1'b0;
end 
// c[ 25 ]
initial
begin
	c[25] = 1'b0;
	c[25] = #160000 1'b1;
	c[25] = #140000 1'b0;
end 
// c[ 24 ]
initial
begin
	c[24] = 1'b0;
end 
// c[ 23 ]
initial
begin
	c[23] = 1'b0;
end 
// c[ 22 ]
initial
begin
	c[22] = 1'b0;
	c[22] = #160000 1'b1;
	c[22] = #140000 1'b0;
end 
// c[ 21 ]
initial
begin
	c[21] = 1'b0;
end 
// c[ 20 ]
initial
begin
	c[20] = 1'b0;
	c[20] = #300000 1'b1;
	c[20] = #600000 1'b0;
end 
// c[ 19 ]
initial
begin
	c[19] = 1'b0;
end 
// c[ 18 ]
initial
begin
	c[18] = 1'b0;
end 
// c[ 17 ]
initial
begin
	c[17] = 1'b0;
end 
// c[ 16 ]
initial
begin
	c[16] = 1'b0;
end 
// c[ 15 ]
initial
begin
	c[15] = 1'b0;
end 
// c[ 14 ]
initial
begin
	c[14] = 1'b0;
end 
// c[ 13 ]
initial
begin
	c[13] = 1'b0;
end 
// c[ 12 ]
initial
begin
	c[12] = 1'b0;
end 
// c[ 11 ]
initial
begin
	c[11] = 1'b0;
end 
// c[ 10 ]
initial
begin
	c[10] = 1'b0;
	c[10] = #160000 1'b1;
	c[10] = #140000 1'b0;
end 
// c[ 9 ]
initial
begin
	c[9] = 1'b1;
	c[9] = #160000 1'b0;
	c[9] = #740000 1'b1;
end 
// c[ 8 ]
initial
begin
	c[8] = 1'b1;
	c[8] = #160000 1'b0;
	c[8] = #740000 1'b1;
end 
// c[ 7 ]
initial
begin
	c[7] = 1'b0;
end 
// c[ 6 ]
initial
begin
	c[6] = 1'b0;
end 
// c[ 5 ]
initial
begin
	c[5] = 1'b0;
end 
// c[ 4 ]
initial
begin
	c[4] = 1'b0;
end 
// c[ 3 ]
initial
begin
	c[3] = 1'b0;
end 
// c[ 2 ]
initial
begin
	c[2] = 1'b0;
	c[2] = #160000 1'b1;
	c[2] = #140000 1'b0;
end 
// c[ 1 ]
initial
begin
	c[1] = 1'b0;
end 
// c[ 0 ]
initial
begin
	c[0] = 1'b0;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #20000 1'b1;
	#20000;
end 
// data_in[ 31 ]
initial
begin
	data_in[31] = 1'b0;
end 
// data_in[ 30 ]
initial
begin
	data_in[30] = 1'b1;
end 
// data_in[ 29 ]
initial
begin
	data_in[29] = 1'b0;
end 
// data_in[ 28 ]
initial
begin
	data_in[28] = 1'b1;
end 
// data_in[ 27 ]
initial
begin
	data_in[27] = 1'b0;
end 
// data_in[ 26 ]
initial
begin
	data_in[26] = 1'b0;
end 
// data_in[ 25 ]
initial
begin
	data_in[25] = 1'b0;
end 
// data_in[ 24 ]
initial
begin
	data_in[24] = 1'b0;
end 
// data_in[ 23 ]
initial
begin
	data_in[23] = 1'b0;
end 
// data_in[ 22 ]
initial
begin
	data_in[22] = 1'b0;
end 
// data_in[ 21 ]
initial
begin
	data_in[21] = 1'b0;
end 
// data_in[ 20 ]
initial
begin
	data_in[20] = 1'b0;
end 
// data_in[ 19 ]
initial
begin
	data_in[19] = 1'b0;
end 
// data_in[ 18 ]
initial
begin
	data_in[18] = 1'b0;
end 
// data_in[ 17 ]
initial
begin
	data_in[17] = 1'b0;
end 
// data_in[ 16 ]
initial
begin
	data_in[16] = 1'b0;
end 
// data_in[ 15 ]
initial
begin
	data_in[15] = 1'b0;
end 
// data_in[ 14 ]
initial
begin
	data_in[14] = 1'b0;
end 
// data_in[ 13 ]
initial
begin
	data_in[13] = 1'b0;
end 
// data_in[ 12 ]
initial
begin
	data_in[12] = 1'b0;
end 
// data_in[ 11 ]
initial
begin
	data_in[11] = 1'b0;
end 
// data_in[ 10 ]
initial
begin
	data_in[10] = 1'b0;
end 
// data_in[ 9 ]
initial
begin
	data_in[9] = 1'b0;
end 
// data_in[ 8 ]
initial
begin
	data_in[8] = 1'b0;
end 
// data_in[ 7 ]
initial
begin
	data_in[7] = 1'b0;
end 
// data_in[ 6 ]
initial
begin
	data_in[6] = 1'b0;
end 
// data_in[ 5 ]
initial
begin
	data_in[5] = 1'b0;
end 
// data_in[ 4 ]
initial
begin
	data_in[4] = 1'b0;
end 
// data_in[ 3 ]
initial
begin
	data_in[3] = 1'b0;
end 
// data_in[ 2 ]
initial
begin
	data_in[2] = 1'b0;
end 
// data_in[ 1 ]
initial
begin
	data_in[1] = 1'b0;
end 
// data_in[ 0 ]
initial
begin
	data_in[0] = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

DataPath_vlg_sample_tst tb_sample (
	.c(c),
	.clock(clock),
	.data_in(data_in),
	.reset(reset),
	.sampler_tx(sampler)
);

DataPath_vlg_check_tst tb_out(
	.cout(cout),
	.data_out(data_out),
	.Muxes8pra1_DOIS_t(Muxes8pra1_DOIS_t),
	.Muxes8pra1_TRES_t(Muxes8pra1_TRES_t),
	.Muxes8pra1_UM_t(Muxes8pra1_UM_t),
	.N(N),
	.ov(ov),
	.r0(r0),
	.r1(r1),
	.r2(r2),
	.ULA1_t(ULA1_t),
	.ULA2_t(ULA2_t),
	.Z(Z),
	.sampler_rx(sampler)
);
endmodule

